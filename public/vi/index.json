[
{
	"uri": "//localhost:1313/vi/",
	"title": "Amplify Photo Sharing Workshop",
	"tags": [],
	"description": "",
	"content": "Tổng quan Workshop này sẽ đề cập đến cách xây dựng một ứng dụng Fullstack trên AWS. Bạn có thể lưu trữ, thêm các tính năng xác thực một cách đơn giản và nhanh chóng với Amplify - một bộ công cụ của AWS được xây dựng để phát triển, phân phối và quản lý các ứng dụng với khả năng mở rộng và được xây dựng trên các nền tảng web và nền tảng di động phổ biến.\nVới bài workshop này, bạn sẽ không chỉ làm quen với các công nghệ như React, GraphQL mà còn học cách tích hợp chúng vào một ứng dụng thực tế trên nền tảng AWS. Workshop sẽ cung cấp cho bạn một hướng dẫn chi tiết và thực hành từng bước, giúp bạn hiểu rõ hơn về cách sử dụng Amplify và các công nghệ liên quan để xây dựng ứng dụng của riêng bạn.\nChúng ta sẽ bắt tay vào làm một ứng dụng có tên là \u0026ldquo;Photo sharing\u0026rdquo; - một ứng dụng đơn giản cho phép lưu trữ các bức ảnh của bạn trên AWS Storage S3\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Quản lý session logs Storage Photo Sharing App Dọn dẹp tài nguyên "
},
{
	"uri": "//localhost:1313/vi/6-photosharingapp/6.1-appsetup/",
	"title": "Dựng các component",
	"tags": [],
	"description": "",
	"content": "Tiến hành tạo các component Ta cần tạo các component sau trong ứng dụng tại folder src\nButton.js CreatePost.js Header.js Post.js Posts.js Button.js import React from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rexport default function Button({ title, onClick, type = \u0026#34;action\u0026#34; }) {\rreturn (\r\u0026lt;button className={buttonStyle(type)} onClick={onClick}\u0026gt;\r{title}\r\u0026lt;/button\u0026gt;\r);\r}\rconst buttonStyle = (type) =\u0026gt; css`\rbackground-color: ${type === \u0026#34;action\u0026#34; ? \u0026#34;black\u0026#34; : \u0026#34;red\u0026#34;};\rheight: 40px;\rwidth: 160px;\rfont-weight: 600;\rfont-size: 16px;\rcolor: white;\routline: none;\rborder: none;\rmargin-top: 5px;\rcursor: pointer;\r\\:hover {\rbackground-color: #363636;\r}\r`; Header.js import React from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { Link } from \u0026#34;react-router-dom\u0026#34;;\rexport default function Header() {\rreturn (\r\u0026lt;div className={headerContainer}\u0026gt;\r\u0026lt;h1 className={headerStyle}\u0026gt;Postagram\u0026lt;/h1\u0026gt;\r\u0026lt;Link to=\u0026#34;/\u0026#34; className={linkStyle}\u0026gt;\rAll Posts\r\u0026lt;/div\u0026gt;\r);\r}\rconst headerContainer = css`\rpadding-top: 20px;\r`;\rconst headerStyle = css`\rfont-size: 40px;\rmargin-top: 0px;\r`;\rconst linkStyle = css`\rcolor: black;\rfont-weight: bold;\rtext-decoration: none;\rmargin-right: 10px;\r\\:hover {\rcolor: #058aff;\r}\r`; Posts.js Tiếp theo, ta cần tạo component Posts để render danh sách các bài post. Component này sẽ nhận 1 props là một array posts và hiển thị array đó\nimport React from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { Link } from \u0026#34;react-router-dom\u0026#34;;\rexport default function Posts({ posts = [] }) {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt;\r{posts.map((post) =\u0026gt; (\r\u0026lt;Link to={`/post/${post?.id}`} className={linkStyle} key={post?.id}\u0026gt;\r\u0026lt;div key={post?.id} className={postContainer}\u0026gt;\r\u0026lt;h1 className={postTitleStyle}\u0026gt;{post?.name}\u0026lt;/h1\u0026gt;\r\u0026lt;img alt=\u0026#34;post\u0026#34; className={imageStyle} src={post?.image} /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/Link\u0026gt;\r))}\r\u0026lt;/\u0026gt;\r);\r}\rconst postTitleStyle = css`\rmargin: 15px 0px;\rcolor: #0070f3;\r`;\rconst linkStyle = css`\rtext-decoration: none;\r`;\rconst postContainer = css`\rborder-radius: 10px;\rpadding: 1px 20px;\rborder: 1px solid #ddd;\rmargin-bottom: 20px;\r\\:hover {\rborder-color: #0070f3;\r}\r`;\rconst imageStyle = css`\rwidth: 100%;\rmax-width: 400px;\r`; CreatePost.js Tiếp theo là component CreatePost. Đây là một modal cho phép tạo mới post. Component nhận các props sau:\nupdateOverlayVisibility - Hiển thị / Ẩn modal updatePosts - Func cho phép update danh sách bài posts posts - Danh sách posts ban đầu Component này sẽ hoạt động như sau:\nĐầu tiên ta tạo 1 state để lưu dữ liệu form, khởi tạo giá trị cho state Func onChangeText để update form state khi người dùng input vào các field name, description, location Func onChangeImage để update form state cho trường image Func save sẽ hoạt động như sau: Đầu tiên check required tất cả các trường Update saving state để hiển thị loading Tạo unique id cho post bằng thư viện uuid Tạo object post để gọi API tạo mới post Gọi func uploadData() để upload ảnh lên S3 Gọi API tạo bài post Update local state, close popup import React, { useState } from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport Button from \u0026#34;./Button\u0026#34;;\rimport { v4 as uuid } from \u0026#34;uuid\u0026#34;;\rimport { createPost } from \u0026#34;./graphql/mutations\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rimport { uploadData } from \u0026#34;aws-amplify/storage\u0026#34;;\r/* Initial state to hold form input, saving state */\rconst initialState = {\rname: \u0026#34;\u0026#34;,\rdescription: \u0026#34;\u0026#34;,\rimage: {},\rfile: \u0026#34;\u0026#34;,\rlocation: \u0026#34;\u0026#34;,\rsaving: false,\r};\rexport default function CreatePost({\rupdateOverlayVisibility,\rupdatePosts,\rposts,\ruser,\r}) {\r/* 1. Create local state with useState hook */\rconst [formState, updateFormState] = useState(initialState);\rconst client = generateClient();\r/* 2. onChangeText handler updates the form state when a user types into a form field */\rfunction onChangeText(e) {\re.persist();\rupdateFormState((currentState) =\u0026gt; ({\r...currentState,\r[e.target.name]: e.target.value,\r}));\r}\r/* 3. onChangeFile handler will be fired when a user uploads a file */\rfunction onChangeFile(e) {\re.persist();\rif (!e.target.files[0]) return;\rconst fileExtPosition = e.target.files[0].name.search(/.png|.jpg|.gif/i);\rconst firstHalf = e.target.files[0].name.slice(0, fileExtPosition);\rconst secondHalf = e.target.files[0].name.slice(fileExtPosition);\rconst fileName = firstHalf + \u0026#34;_\u0026#34; + uuid() + secondHalf;\rconst image = { fileInfo: e.target.files[0], name: fileName };\rupdateFormState((currentState) =\u0026gt; ({\r...currentState,\rfile: URL.createObjectURL(e.target.files[0]),\rimage,\r}));\r}\rconst handleUpload = async (key, data) =\u0026gt; {\r// Upload a file with access level `guest` as the equivalent of `public` in v5\rconst operation = uploadData({\rkey,\rdata,\roptions: {\raccessLevel: \u0026#34;guest\u0026#34;,\r},\r});\rconst result = await operation.result;\rreturn result;\r};\r/* 4. Save the post */\rasync function save() {\rconsole.log(\u0026#34;save\u0026#34;);\rtry {\rconst { name, description, location, image } = formState;\rif (!name || !description || !location || !image.name) return;\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: true }));\rconst postId = uuid();\rconst postInfo = {\rname,\rdescription,\rlocation,\rimage: formState.image.name,\rid: postId,\r};\rconst result = handleUpload(\rformState.image.name,\rformState.image.fileInfo\r);\rawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\r});\rupdatePosts([...posts, { ...postInfo, image: formState.file }]);\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: false }));\rupdateOverlayVisibility(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r}\rreturn (\r\u0026lt;div className={containerStyle}\u0026gt;\r\u0026lt;input\rplaceholder=\u0026#34;Post name\u0026#34;\rname=\u0026#34;name\u0026#34;\rclassName={inputStyle}\ronChange={onChangeText}\r/\u0026gt;\r\u0026lt;input\rplaceholder=\u0026#34;Location\u0026#34;\rname=\u0026#34;location\u0026#34;\rclassName={inputStyle}\ronChange={onChangeText}\r/\u0026gt;\r\u0026lt;input\rplaceholder=\u0026#34;Description\u0026#34;\rname=\u0026#34;description\u0026#34;\rclassName={inputStyle}\ronChange={onChangeText}\r/\u0026gt;\r\u0026lt;input type=\u0026#34;file\u0026#34; onChange={onChangeFile} /\u0026gt;\r{formState.file \u0026amp;\u0026amp; (\r\u0026lt;img className={imageStyle} alt=\u0026#34;preview\u0026#34; src={formState.file} /\u0026gt;\r)}\r\u0026lt;Button title=\u0026#34;Create New Post\u0026#34; onClick={save} /\u0026gt;\r\u0026lt;Button\rtype=\u0026#34;cancel\u0026#34;\rtitle=\u0026#34;Cancel\u0026#34;\ronClick={() =\u0026gt; updateOverlayVisibility(false)}\r/\u0026gt;\r{formState.saving \u0026amp;\u0026amp; \u0026lt;p className={savingMessageStyle}\u0026gt;Saving post...\u0026lt;/p\u0026gt;}\r\u0026lt;/div\u0026gt;\r);\r}\rconst inputStyle = css`\rmargin-bottom: 10px;\routline: none;\rpadding: 7px;\rborder: 1px solid #ddd;\rfont-size: 16px;\rborder-radius: 4px;\r`;\rconst imageStyle = css`\rheight: 120px;\rmargin: 10px 0px;\robject-fit: contain;\r`;\rconst containerStyle = css`\rdisplay: flex;\rflex-direction: column;\rwidth: 400px;\rheight: 420px;\rposition: fixed;\rleft: 0;\rborder-radius: 4px;\rtop: 0;\rmargin-left: calc(50vw - 220px);\rmargin-top: calc(50vh - 230px);\rbackground-color: white;\rborder: 1px solid #ddd;\rbox-shadow: rgba(0, 0, 0, 0.25) 0px 0.125rem 0.25rem;\rpadding: 20px;\r`;\rconst savingMessageStyle = css`\rmargin-bottom: 0px;\r`; Post.js Tiếp theo ta sẽ tạo component Post\nComponent này sẽ lấy id từ url parameter, gọi API get detail post và hiển thị detail bài posst\n// Post.js\rimport React, { useState, useEffect } from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { useParams } from \u0026#34;react-router-dom\u0026#34;;\rimport { getPost } from \u0026#34;./graphql/queries\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rimport { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;;\rexport default function Post() {\rconst [loading, updateLoading] = useState(true);\rconst [post, updatePost] = useState(null);\rconst client = generateClient();\rconst { id } = useParams();\ruseEffect(() =\u0026gt; {\rfetchPost();\r}, []);\rconst handleGetUrl = async (key) =\u0026gt; {\rconst url = await getUrl({\rkey,\roptions: {\rvalidateObjectExistence: true,\r},\r});\rreturn url.url.href;\r};\rasync function fetchPost() {\rtry {\rconst postData = await client.graphql({\rquery: getPost,\rvariables: { id },\r});\rconst currentPost = postData.data.getPost;\rconst image = await handleGetUrl(currentPost.image);\rcurrentPost.image = image;\rupdatePost(currentPost);\rupdateLoading(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r}\rif (loading) return \u0026lt;h3\u0026gt;Loading...\u0026lt;/h3\u0026gt;;\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;h1 className={titleStyle}\u0026gt;{post.name}\u0026lt;/h1\u0026gt;\r\u0026lt;h3 className={locationStyle}\u0026gt;{post.location}\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;{post.description}\u0026lt;/p\u0026gt;\r\u0026lt;img alt=\u0026#34;post\u0026#34; src={post.image} className={imageStyle} /\u0026gt;\r\u0026lt;/\u0026gt;\r);\r}\rconst titleStyle = css`\rmargin-bottom: 7px;\r`;\rconst locationStyle = css`\rcolor: #0070f3;\rmargin: 0;\r`;\rconst imageStyle = css`\rmax-width: 500px;\r@media (max-width: 500px) {\rwidth: 100%;\r}\r`; "
},
{
	"uri": "//localhost:1313/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "AWS Amplify là một bộ công cụ được xây dựng có mục đích để phát triển, phân phối và quản lý các ứng dụng với khả năng mở rộng và được xây dựng trên các nền tảng web và nền tảng di động phổ biến. AWS Amplify giúp tối ưu hóa quá trình phát triển ứng dụng full-stack. Với các thư viện, CLI và dịch vụ của nó, bạn có thể dễ dàng kết nối frontend của mình với Clouds để xác thực, lưu trữ và nhiều tính năng khác.\nTa có thể sử dụng Amplify để xây dựng 1 ứng dụng Full-stack. Amplify cung cấp các công cụ để hosting frontend (Amplify hosting), xây dựng backend, cung cấp tài nguyên lưu trữ data (Amazon DynamoDB), cung cấp Storage lưu trữ ảnh (Amazon S3 bucket), cung cấp tính năng xác thực (Amazon Cognito)\nDưới đây là một số dịch vụ Amplify cung cấp:\nAmplify CLI - Cấu hình tất cả các dịch vụ cần thiết để cung cấp dịch vụ cho backend của bạn thông qua giao diện dòng lệnh đơn giản.\nThư viện Amplify - Thư viện client để xây dựng các use case phổ biến như Authentication, dữ liệu và lưu trữ ảnh\nAmplify Studio - Xây dựng ứng dụng web và di động fullstack của bạn bằng một môi trường phát triển hình ảnh đơn giản và trực quan.\nAmplify UI Components - Thư viện giao diện người dùng để xây dựng ứng dụng frontend của bạn được xây dựng cho React, React Native, Angular, Vue và Flutter.\nAmplify Hosting - là một dịch vụ của AWS cung cấp một luồng làm việc dựa trên git cho triển khai liên tục và lưu trữ các ứng dụng web fullstack.\nAmplify Authentication - dịch vụ xác thực người dùng nhanh chóng\nAmplify Storage - Nơi lưu trữ hình ảnh, âm thanh, video của ứng dụng trên Clouds.\n"
},
{
	"uri": "//localhost:1313/vi/3-api/3.3-usingapi/",
	"title": "Sử dụng API",
	"tags": [],
	"description": "",
	"content": "API đã được tạo, giờ ta có thể tương tác với chúng trên ứng dụng ReactJS\nĐầu tiên, ta cần phải cấu hình cho ứng dụng React có thể tương tác với GraphQL API. Để cấu hình, ta thêm vào file src/index.js đoạn import dưới đây. Trong đó file aws-exports.js đã đauto-generated trong thư mục src\nimport { Amplify } from \u0026#34;aws-amplify\u0026#34;;\rimport config from \u0026#34;./aws-exports\u0026#34;;\rAmplify.configure(config); Giờ đây, ứng dụng đã sẵn sàng sử dụng dịch vụ AWS\nTương tác với GraphQL Bây giờ GraphQL API đã hoạt động, chúng ta có thể bắt đầu tương tác với chúng. Đầu tiên chúng ta sẽ thực hiện một truy vấn để lấy dữ liệu từ API.\nĐể làm điều đó, ta cần:\nXác định truy vấn Thực thi truy vấn Lưu dữ liệu được trả về trong trạng thái ứng dụng của chúng ta Liệt kê các mục trong giao diện người dùng của chúng ta Dưới đây là cách truy vấn dữ liệu, lấy tất cả các bài post từ API\n/* Call client.graphql, passing in the query that we\u0026#39;d like to execute. */\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rconst client = generateClient();\rconst postData = await client.graphql({ query: listPosts }); src/App.js Update file src/App.js như sau:\nimport React, { useState, useEffect } from \u0026#34;react\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rimport { listPosts } from \u0026#34;./graphql/queries\u0026#34;;\rexport default function App() {\rconst [posts, setPosts] = useState([]);\rconst client = generateClient();\ruseEffect(() =\u0026gt; {\rfetchPosts();\r}, []);\rasync function fetchPosts() {\rtry {\rconst postData = await client.graphql({ query: listPosts });\rsetPosts(postData.data.listPosts.items);\r} catch (err) {\rconsole.log({ err });\r}\r}\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r{posts.map((post) =\u0026gt; (\r\u0026lt;div key={post.id}\u0026gt;\r\u0026lt;h3\u0026gt;{post.name}\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;{post.location}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{post.description}\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r))}[text](https://us-east-1.console.aws.amazon.com/appsync/home?region%3Dus-east-1#%2F)\r\u0026lt;/div\u0026gt;\r);\r} Đoạn code trên ta đã sử dụng client.graphql để truy vấn dữ liệu từ GraphQL API, sau đó lưu dữ liệu vào một state và hiển thị chúng. Tất cả các bài post đã được tạo ra trước đó thông qua AWS AppSyncs ở phần trước.\nKiểm tra kết quả:\nnpm start Tất cả bài post đã được hiển thị!\n"
},
{
	"uri": "//localhost:1313/vi/3-api/3.1-graphqlapi/",
	"title": "Tạo GraphQL API",
	"tags": [],
	"description": "",
	"content": "Để tạo GraphQL API bằng Amplify, ta sử dụng câu lệnh:\namplify add api Mở file amplify/backend/api/photogram/schema.graphql bằng IDE hoặc editor của bạn và cập nhật schema như sau:\ninput AMPLIFY {\rglobalAuthRule: AuthRule = { allow: public }\r}\rtype Post @model {\rid: ID!\rname: String!\rlocation: String!\rdescription: String!\rimage: String\r} Lưu thay đổi và chạy lệnh sau:\namplify build "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.1-createreactapp/",
	"title": "Tạo ứng dụng React",
	"tags": [],
	"description": "",
	"content": "Đầu tiên, ta cần tạo một ứng dụng React sử dụng CRA Create React App CLI\nnpx create-react-app photogram Cd vào thư mục ứng dụng, cài các thư viện cần thiết như aws-amplify, @emotion/css, uuid. react-router-dom@5, @aws-amplify/ui-react\ncd photogram npm install aws-amplify @emotion/css uuid react-router-dom@5\r@aws-amplify/ui-react "
},
{
	"uri": "//localhost:1313/vi/4-authentication/4.1-authapi/",
	"title": "Thêm tính năng xác thực",
	"tags": [],
	"description": "",
	"content": "Ở phần này, ta sẽ thực hiện thêm tính năng xác thực người dùng cho ứng dụng. Để thêm xác thực với Amplify ta sử dụng câu lệnh dưới đây:\namplify add auth Tiến hành deploy lại:\namplify push Khi deploy hoàn thành, ta sẽ có các dịch vụ xác thực được thiết lập trong Amazon Cognito. Để xem thêm thông tin, chạy lệnh sau:\namplify console auth Chọn User Pool\n"
},
{
	"uri": "//localhost:1313/vi/4-authentication/4.2-authfe/",
	"title": "Xác thực trong React",
	"tags": [],
	"description": "",
	"content": "withAuthenticator component Để thêm tính năng xác thực vào ứng dụng React, chúng ta sẽ vào src/App.js và import withAuthenticator HOC (Higher Order Component) từ @aws-amplify/ui-react:\n// src/App.js, import the withAuthenticator component and associated CSS\rimport { withAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; Tiếp theo, bọc App component với withAuthenticator\nfunction App() {\r/* existing code here, no changes */\r}\r/* src/App.js, change the default export to this: */\rexport default withAuthenticator(App); Reload ứng dụng và xem kết quả, tính năng xác thực đã được thêm\nChọn \u0026ldquo;Đăng ký\u0026rdquo; và làm theo hướng dẫn để tạo tài khoản. Hãy chắc chắn sử dụng một địa chỉ email thật! Sau khi gửi request đăng kí, kiểm tra email của bạn để xác nhận đăng ký.\nĐã tạo thành công tính năng xác thực, bạn có thể xem nó bất kỳ lúc nào trong console bằng cách chạy lệnh sau - chọn User Pool:\namplify console auth\rUsing service: Cognito, provided by: awscloudformation\r? Which console\r❯ User Pool\rIdentity Pool\rBoth Thêm nút Đăng xuất Update file App.js\nfunction App({ signOut, user }) {\r...\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r...\r\u0026lt;button onClick={signOut}\u0026gt;Sign out\u0026lt;/button\u0026gt;\r} Thêm style tại file src/index.css\n:root {\r--amplify-primary-color: #006eff;\r--amplify-primary-tint: #005ed9;\r--amplify-primary-shade: #005ed9;\r} Quan sát kết quả, nút Đăng xuất được thêm thành công\nKiểm tra thông tin đăng nhập Chúng ta có thể xem thông tin người dùng khi họ đã đăng nhập bằng cách gọi currentAuthenticatedUser() trong useEffect:\nimport { getCurrentUser } from \u0026#34;aws-amplify/auth\u0026#34;;\r...\ruseEffect(() =\u0026gt; {\rfetchPosts();\rcurrentAuthenticatedUser();\r}, []);\rasync function currentAuthenticatedUser() {\rtry {\rconst { username, userId } = await getCurrentUser();\rconsole.log(`The username: ${username}`);\rconsole.log(`The userId: ${userId}`);\r} catch (err) {\rconsole.log(err);\r}\r} Kiểm tra thông tin trên Console của Browser\n"
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "\rTrong phần này, ta cần tạo 1 ứng dụng React và config Amplify cho ứng dụng đó\nĐể tìm hiểu thêm về Create React App và Amplify bạn có thể tham khảo docs :\nVề React App Về Amplify Nội dung Create React App Config Amplify "
},
{
	"uri": "//localhost:1313/vi/2-prerequiste/2.2-configamplify/",
	"title": "Cấu hình Amplify",
	"tags": [],
	"description": "",
	"content": "Install Amplify CLI npm install -g @aws-amplify/cli Cấu hình Amplify bằng câu lệnh sau:\namplify configure\r- Specify the AWS Region: us-east-1 || us-west-2 ||\reu-central-1 - Specify the username of the new IAM user: amplify-cli-user \u0026gt; In\rthe AWS Console, click Next: Permissions, Next: Tags, Next: Review, \u0026amp; Create\rUser to create the new IAM user. Then return to the command line \u0026amp; press Enter.\r- Enter the access key of the newly created user:\r? accessKeyId:(\u0026lt;YOUR_ACCESS_KEY_ID\u0026gt;)\r? secretAccessKey: (\u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt;)\r- Profile Name: amplify-cli-user Khởi tạo Amplify trong ứng dụng Photogram amplify init Sau khi khởi tạo xong, ta sẽ thấy một thư mục mới được sinh ra có tên là amplify trong project, và một file có tên aws-exports.js được sinh ra trong thư mục src\nĐể xem trạng thái của Amplify, ta sử dụng câu lệnh:\namplify status Để khởi chạy Amplify console trên browser ta sử dụng câu lệnh:\namplify console "
},
{
	"uri": "//localhost:1313/vi/3-api/3.2-deployapi/",
	"title": "Deploy API",
	"tags": [],
	"description": "",
	"content": "Để deploy API bằng Amplify, ta sử dụng câu lệnh, quá trình deploy sẽ mất vài phút:\namplify push Có thể sử dụng câu lệnh amplify push -y để bỏ qua các câu hỏi với lựa chọn Yes\nDeploy xong, giờ ta có thể tương tác với API\nTesting the API Để test API ta sử dụng AppSync dashboard, để mở AppSync dashboard ta sử dụng câu lệnh, và chọn GraphQL:\namplify console api Trên màn hình AppSync dashboard, chọn Queries. Ta bắt đầu với việc tạo một bài Post mới:\nmutation createPost {\rcreatePost(\rinput: {\rname: \u0026#34;My first post\u0026#34;\rlocation: \u0026#34;New York\u0026#34;\rdescription: \u0026#34;Best burgers in NYC - Jackson Hole\u0026#34;\r}\r) {\rid\rname\rlocation\rdescription\r}\r} Một bài Post đã được tạo ra, giờ ta có thể truy vấn danh sách toàn bộ bài Post như sau:\nquery listPosts {\rlistPosts {\ritems {\rid\rname\rlocation\rdescription\r}\r}\r} "
},
{
	"uri": "//localhost:1313/vi/6-photosharingapp/6.2-reactrouter/",
	"title": "React Router",
	"tags": [],
	"description": "",
	"content": "Ta cần tạo 2 route sau trong App.js\nRoute - /. Trang chủ sẽ hiển thị danh sách lấy được từ API. Route - /post/:id. Trang post detail, hiển thị thông tin chi tiết bài post Ta sẽ sử dụng React router để lấy ID của bài post trên url, sau đó gọi API get detail để lấy thông tin chi tiết bài post\n// src/App.js\rimport React, { useEffect, useState } from \u0026#34;react\u0026#34;;\rimport { withAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\r// import query definition\rimport { listPosts } from \u0026#34;./graphql/queries\u0026#34;;\rimport Button from \u0026#34;./Button\u0026#34;;\rimport CreatePost from \u0026#34;./CreatePost\u0026#34;;\rimport Header from \u0026#34;./Header\u0026#34;;\rimport Post from \u0026#34;./Post\u0026#34;;\rimport Posts from \u0026#34;./Posts\u0026#34;;\rimport \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { HashRouter, Route, Switch } from \u0026#34;react-router-dom\u0026#34;;\rimport { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;;\rfunction Router({ user, signOut }) {\r/* create a couple of pieces of initial state */\rconst [showOverlay, updateOverlayVisibility] = useState(false);\rconst [posts, updatePosts] = useState([]);\rconst client = generateClient();\rconst [myPosts, updateMyPosts] = useState([]);\r/* fetch posts when component loads */\ruseEffect(() =\u0026gt; {\rfetchPosts();\r}, []);\rconst handleGetUrl = async (key) =\u0026gt; {\rconst url = await getUrl({\rkey,\roptions: {\rvalidateObjectExistence: true,\r},\r});\rreturn url.url.href;\r};\rasync function fetchPosts() {\r/* query the API, ask for 100 items */\rlet postData = await client.graphql({\rquery: listPosts,\rvariables: { limit: 100 },\r});\rlet postsArray = postData.data.listPosts.items;\rsetPostState(postsArray);\r/* map over the image keys in the posts array, get signed image URLs for each image */\rpostsArray = await Promise.all(\rpostsArray.map(async (post) =\u0026gt; {\rif (post.image) {\rtry {\rconst imageURL = await handleGetUrl(post.image);\rpost.image = imageURL;\rreturn post;\r} catch (error) {\rif (error.code === \u0026#34;NotFound\u0026#34;) {\rconsole.error(\u0026#34;Image not found for post:\u0026#34;, post.id);\r} else {\rconsole.error(\r\u0026#34;Error fetching image URL for post:\u0026#34;,\rpost.id,\rerror\r);\r}\rreturn post;\r}\r}\r})\r);\r/* update the posts array in the local state */\rsetPostState(postsArray);\r}\rasync function setPostState(postsArray) {\rconst myPostData = postsArray.filter((p) =\u0026gt; p.owner === user.username);\rupdateMyPosts(myPostData);\rupdatePosts(postsArray);\r}\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;HashRouter\u0026gt;\r\u0026lt;div className={contentStyle}\u0026gt;\r\u0026lt;Header /\u0026gt;\r\u0026lt;hr className={dividerStyle} /\u0026gt;\r\u0026lt;Button\rtitle=\u0026#34;New Post\u0026#34;\ronClick={() =\u0026gt; updateOverlayVisibility(true)}\r/\u0026gt;\r\u0026lt;Switch\u0026gt;\r\u0026lt;Route exact path=\u0026#34;/\u0026#34;\u0026gt;\r\u0026lt;Posts posts={posts} /\u0026gt;\r\u0026lt;/Route\u0026gt;\r\u0026lt;Route path=\u0026#34;/post/:id\u0026#34;\u0026gt;\r\u0026lt;Post /\u0026gt;\r\u0026lt;/Route\u0026gt;\r\u0026lt;Route exact path=\u0026#34;/myposts\u0026#34;\u0026gt;\r\u0026lt;Posts posts={myPosts} /\u0026gt;\r\u0026lt;/Route\u0026gt;\r\u0026lt;/Switch\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button onClick={signOut}\u0026gt;Sign out\u0026lt;/button\u0026gt;\r\u0026lt;/HashRouter\u0026gt;\r{showOverlay \u0026amp;\u0026amp; (\r\u0026lt;CreatePost\rupdateOverlayVisibility={updateOverlayVisibility}\rupdatePosts={setPostState}\rposts={posts}\ruser={user}\r/\u0026gt;\r)}\r\u0026lt;/\u0026gt;\r);\r}\rconst dividerStyle = css`\rmargin-top: 15px;\r`;\rconst contentStyle = css`\rmin-height: calc(100vh - 45px);\rpadding: 0px 40px;\r`;\rexport default withAuthenticator(Router); "
},
{
	"uri": "//localhost:1313/vi/3-api/",
	"title": "Tạo API",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ thực hiện tạo API và deploy chúng bằng Amplify. Sau đó sẽ kết nối ứng dụng React với APIs vừa tạo. Ở đây chúng ta chọn GraphQL API\nNội dung Tạo GraphQL API Deploy API Using API "
},
{
	"uri": "//localhost:1313/vi/6-photosharingapp/6.3-tryitout/",
	"title": "Try it out",
	"tags": [],
	"description": "",
	"content": "Truy cập database và xoá bản ghi Ta sẽ xoá bản ghi đã tạo bằng AppSyncs trước đó như sau:\nMở Amplify console amplify console Chọn tab API và chọn View PostTable trong phần Data sources\nChọn Explore table items Chọn item muốn xoá và chọn action \u0026ldquo;Delete\u0026rdquo;\n"
},
{
	"uri": "//localhost:1313/vi/4-authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "Ở phần này, ta sẽ thêm Authentication cho ứng dụng, sử dụng AWS Cognito và @aws-amplify/ui-react\nNội dung Authentication với AWS Cognito Authentication với React "
},
{
	"uri": "//localhost:1313/vi/6-photosharingapp/6.4-authgraphql/",
	"title": "Thêm xác thực cho API",
	"tags": [],
	"description": "",
	"content": "Ta có thể update AppSync API để enable authorization modes Trong ví dụ này, ta sẽ update API sử dụng Cognito và API Key để kích hoạt phân quyền truy cập Để enable authorization modes, ta thực hiện:\namplify update api Update schema\ntype Post\r@model\r@auth(\rrules: [\r{ allow: owner }\r{ allow: public, operations: [read] }\r{ allow: private, operations: [read] }\r]\r) {\rid: ID!\rname: String!\rlocation: String!\rdescription: String!\rimage: String\rowner: String\r} Deploy lại thay đổi\namplify push -y Now, you will have two types of API access: Bây giờ ta đã có 2 loại API\nPrivate (Cognito): User được phép xem toàn bộ bài post. Cho phép tạo mới bài post nếu user đăng nhập thành công. Sau khi đăng nhập, user có thể sửa xoá các bài post của họ. Public (API Key): Bất kì người dùng nào dù chưa đăng nhập cũng có thể query danh sách bài post Để gọi đến API Private, ta cần thêm authMode vào câu lệnh query hoặc mutation\nawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\rauthMode: \u0026#34;userPool\u0026#34;,\r}); Thêm route mới chỉ cho phép hiển thị các bài post của bản thân Tiếp theo, ta sẽ tạo thêm 1 route mới, route này có tên là My post, chỉ hiển thị các bài post của user đang đăng nhập.\nMở file CreatePost.js và update như sau\nasync function save() {\rtry {\rconst { name, description, location, image } = formState;\rif (!name || !description || !location || !image.name) return;\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: true }));\rconst postId = uuid();\rconst postInfo = {\rname,\rdescription,\rlocation,\rimage: formState.image.name,\rid: postId,\r};\rconst result = handleUpload(\rformState.image.name,\rformState.image.fileInfo\r);\r// await uploadData(formState.image.name, formState.image.fileInfo);\rconsole.log(\u0026#34;result\u0026#34;, result);\rawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\rauthMode: \u0026#34;userPool\u0026#34;,\r});\rupdatePosts([\r...posts,\r{ ...postInfo, image: formState.file, owner: user.username },\r]); // updated\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: false }));\rupdateOverlayVisibility(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r} Mở file App.js, tạo một state mới để lưu trữ các bài viết của user\nconst [myPosts, updateMyPosts] = useState([]); Viết func setPostState() để set giá trị cho myPosts là các bài post có owner = user.username\nasync function setPostState(postsArray) {\rconst myPostData = postsArray.filter((p) =\u0026gt; p?.owner === user?.username);\rupdateMyPosts(myPostData);\rupdatePosts(postsArray);\r} Thêm router mới\n\u0026lt;Route exact path=\u0026#34;/myposts\u0026#34;\u0026gt;\r\u0026lt;Posts posts={myPosts} /\u0026gt;\r\u0026lt;/Route\u0026gt; Thêm link đến route mới tại file Header.js\n\u0026lt;Link to=\u0026#34;/myposts\u0026#34; className={linkStyle}\u0026gt;\rMy Posts\r\u0026lt;/Link\u0026gt; "
},
{
	"uri": "//localhost:1313/vi/6-photosharingapp/6.5-hosting/",
	"title": "Hosting",
	"tags": [],
	"description": "",
	"content": "Bên cạnh đó, Amplify hỗ trợ CI/CD rất dễ dàng\nĐầu tiên, ta cần tạo 1 Github repo sau đó làm theo hướng dẫn để đẩy toàn bộ source code của ứng dụng lên Github\ngit init\rgit remote add origin git@github.com\\:username/project-name.git\rgit add .\rgit commit -m \u0026#39;initial commit\u0026#39;\rgit push origin master Mở Amplify console\namplify console Chọn tab Hosting Environments, Chọn Github và click Connect branch. Authorize Github repo\nChọn repo và chọn nhánh master, click Next Chọn role và chọn Environments, click Next Cuối cùng, chọn Save and Deploy để deploy ứng dụng Quá trình deploy có thể mất vài phút Hoàn thành quá trình deploy, ta có thể xem thành quả của mình tại domain mới được tạo ra\n"
},
{
	"uri": "//localhost:1313/vi/5-storage/",
	"title": "Storage Amazon S3",
	"tags": [],
	"description": "",
	"content": "Để lưu trữ ảnh, ta sẽ sử dụng AWS S3, config S3 như sau:\namplify add storage Deploy ứng dụng:\namplify push Ta sẽ sử dụng API của S3 để upload và get URL ảnh\nUpload item import { uploadData } from \u0026#34;aws-amplify/storage\u0026#34;;\rconst handleUpload = async (key, data) =\u0026gt; {\rconst operation = uploadData({\rkey,\rdata,\roptions: {\raccessLevel: \u0026#34;guest\u0026#34;,\r},\r});\rconst result = await operation.result;\r}; Truy xuất item import { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;;\rconst handleGetUrl = async (key) =\u0026gt; {\rconst res = await getUrl({\rkey,\roptions: {\rvalidateObjectExistence: true,\r},\r});\rreturn res.url.href;\r}; Bây giờ chúng ta có thể bắt đầu lưu các hình ảnh vào S3 và tiếp tục xây dựng Photo Sharing App.\n"
},
{
	"uri": "//localhost:1313/vi/6-photosharingapp/",
	"title": "Photo Sharing App",
	"tags": [],
	"description": "",
	"content": "Tiếp theo ta sẽ bắt đầu xây dựng giao diện ứng dụng\nNội dung Dựng các component cần thiết Cấu hình React Router Try it out Thêm authentication cho API Hosting "
},
{
	"uri": "//localhost:1313/vi/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Xoá một services Khi kết thúc bài thực hành này, để xoá 1 service ta sẽ thực hiện lệnh sau\namplify remove auth\ramplify push Để kiểm tra cách dịch vụ đang được kích hoạt, ta sử dụng câu lệnh:\namplify status Danh sách các dịch vụ đang được sử dụng sẽ được hiển thị\nXoá toàn bộ service Để xoá toàn bộ service được liên kết, ta sử dụng lệnh sau:\namplify delete "
},
{
	"uri": "//localhost:1313/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]