[
{
	"uri": "//localhost:1313/",
	"title": "Amplify Photo Sharing Workshop",
	"tags": [],
	"description": "",
	"content": "Overview This workshop is intended for software developers with some experience building web applications to learn how to build a full stack cloud application with React, GraphQL, \u0026amp; Amplify . Everything we\u0026rsquo;ll build during the workshop is eligible for AWS\u0026rsquo;s free-tier pricing, however to ensure you don\u0026rsquo;t incur any unexpected costs, be sure to follow the instructions in the cleanup section and remove all the resources you\u0026rsquo;ve created.\nAn understanding of software development and prior experience with the React framework are recommended but not required. Allow around two hours to get through all of the content, and slightly longer if you want to tackle the Extra Credit section!\nContent Introduction Preparation API Authentication Storage Clean up resources "
},
{
	"uri": "//localhost:1313/4-authentication/4.1-authapi/",
	"title": "Add Authentication",
	"tags": [],
	"description": "",
	"content": "Next, let\u0026rsquo;s update the app to add authentication. To add the authentication service, we can use the following command:\namplify add auth To deploy the authentication service, you can run the push command:\namplify push When this step completes you will have authentication services set up in Amazon Cognito. To see more information, you can run the console command:\namplify console auth Choose User Pool\n"
},
{
	"uri": "//localhost:1313/3-api/3.1-graphqlapi/",
	"title": "Adding a GraphQL API",
	"tags": [],
	"description": "",
	"content": "To add a GraphQL API, we can use the following command:\namplify add api The CLI should open this GraphQL schema in your text editor or IDE. If it doesnt, click on the link provided in the console to see this file amplify/backend/api/photogram/schema.graphql\nUpdate the schema to the following:\ninput AMPLIFY { globalAuthRule: AuthRule = { allow: public } } type Post @model { id: ID! name: String! location: String! description: String! image: String } After saving the schema, go back to the CLI and press enter. If Amplify was unable to launch your code editor from the CLI, and you navigated to the schema.graphql file and edited it, you\u0026rsquo;ll need to manually incorporate that schma change by running the following.\namplify build "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.4-authgraphql/",
	"title": "Adding Authorization to the GraphQL API",
	"tags": [],
	"description": "",
	"content": "You can update the AppSync API to enable multiple authorization modes. In this example, we will update the API to use the both Cognito and API Key to enable a combination of public and private access. This will also enable us to implement authorization for the API. To enable multiple authorization modes, reconfigure the API:\namplify update api Now, update the GraphQL schema to the following:\ntype Post\r@model\r@auth(\rrules: [\r{ allow: owner }\r{ allow: public, operations: [read] }\r{ allow: private, operations: [read] }\r]\r) {\rid: ID!\rname: String!\rlocation: String!\rdescription: String!\rimage: String\rowner: String\r} Deploy the changes:\namplify push -y Now, you will have two types of API access:\nPrivate (Cognito) - to create a post, a user must be signed in. Once they have created a post, they can update and delete their own post. They can also read all posts. Public (API key) - Any user, regardless if they are signed in, can query for posts or a single post. Using this combination, you can easily query for just a single user\u0026rsquo;s posts or for all posts.\nTo make this secondary private API call from the client, the authorization type needs to be specified in the query or mutation:\nawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\rauthMode: \u0026#34;userPool\u0026#34;,\r}); Adding a new route to view only your own posts Next we will update the app to create a new route for viewing only the posts that we\u0026rsquo;ve created.\nTo do so, first open CreatePost.js and update the save mutation with the following to specify the authmode and set the owner of the post in the local state:\nasync function save() {\rtry {\rconst { name, description, location, image } = formState;\rif (!name || !description || !location || !image.name) return;\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: true }));\rconst postId = uuid();\rconst postInfo = {\rname,\rdescription,\rlocation,\rimage: formState.image.name,\rid: postId,\r};\rconst result = handleUpload(\rformState.image.name,\rformState.image.fileInfo\r);\r// await uploadData(formState.image.name, formState.image.fileInfo);\rconsole.log(\u0026#34;result\u0026#34;, result);\rawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\rauthMode: \u0026#34;userPool\u0026#34;,\r});\rupdatePosts([\r...posts,\r{ ...postInfo, image: formState.file, owner: user.username },\r]); // updated\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: false }));\rupdateOverlayVisibility(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r} Next, open App.js.\nCreate a new piece of state to hold your own posts named myPosts:\nconst [myPosts, updateMyPosts] = useState([]); Next, in the setPostState method, update myPosts with posts from the signed in user:\nasync function setPostState(postsArray) {\rconst myPostData = postsArray.filter((p) =\u0026gt; p?.owner === user?.username);\rupdateMyPosts(myPostData);\rupdatePosts(postsArray);\r} Now, add a new route to show your posts:\n\u0026lt;Route exact path=\u0026#34;/myposts\u0026#34;\u0026gt;\r\u0026lt;Posts posts={myPosts} /\u0026gt;\r\u0026lt;/Route\u0026gt; Finally, open Header.js and add a link to the new route:\n\u0026lt;Link to=\u0026#34;/myposts\u0026#34; className={linkStyle}\u0026gt;\rMy Posts\r\u0026lt;/Link\u0026gt; "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.1-appsetup/",
	"title": "App Setup",
	"tags": [],
	"description": "",
	"content": "Creating the folder structure for our app Next, create the following files in the src directory:\nButton.js CreatePost.js Header.js Post.js Posts.js amplify add auth Next, we\u0026rsquo;ll go one by one and update these files with our new code.\nButton.js import React from \u0026#34;react\u0026#34;; import { css } from \u0026#34;@emotion/css\u0026#34;; export default function Button({ title, onClick, type = \u0026#34;action\u0026#34; }) { return ( \u0026lt;button className={buttonStyle(type)} onClick={onClick}\u0026gt; {title} \u0026lt;/button\u0026gt; ); } const buttonStyle = (type) =\u0026gt; css` background-color: ${type === \u0026#34;action\u0026#34; ? \u0026#34;black\u0026#34; : \u0026#34;red\u0026#34;}; height: 40px; width: 160px; font-weight: 600; font-size: 16px; color: white; outline: none; border: none; margin-top: 5px; cursor: pointer; \\:hover { background-color: #363636; } `; Header.js import React from \u0026#34;react\u0026#34;; import { css } from \u0026#34;@emotion/css\u0026#34;; import { Link } from \u0026#34;react-router-dom\u0026#34;; export default function Header() { return ( \u0026lt;div className={headerContainer}\u0026gt; \u0026lt;h1 className={headerStyle}\u0026gt;Postagram\u0026lt;/h1\u0026gt; \u0026lt;Link to=\u0026#34;/\u0026#34; className={linkStyle}\u0026gt; All Posts \u0026lt;/Link\u0026gt; \u0026lt;Link to=\u0026#34;/myposts\u0026#34; className={linkStyle}\u0026gt; My Posts \u0026lt;/Link\u0026gt; \u0026lt;/div\u0026gt; ); } const headerContainer = css` padding-top: 20px; `; const headerStyle = css` font-size: 40px; margin-top: 0px; `; const linkStyle = css` color: black; font-weight: bold; text-decoration: none; margin-right: 10px; \\:hover { color: #058aff; } `; Posts.js // Posts.js import React from \u0026#34;react\u0026#34;; import { css } from \u0026#34;@emotion/css\u0026#34;; import { Link } from \u0026#34;react-router-dom\u0026#34;; export default function Posts({ posts = [] }) { return ( \u0026lt;\u0026gt; \u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;Link to={`/post/${post?.id}`} className={linkStyle} key={post?.id}\u0026gt; \u0026lt;div key={post?.id} className={postContainer}\u0026gt; \u0026lt;h1 className={postTitleStyle}\u0026gt;{post?.name}\u0026lt;/h1\u0026gt; \u0026lt;img alt=\u0026#34;post\u0026#34; className={imageStyle} src={post?.image} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/Link\u0026gt; ))} \u0026lt;/\u0026gt; ); } const postTitleStyle = css` margin: 15px 0px; color: #0070f3; `; const linkStyle = css` text-decoration: none; `; const postContainer = css` border-radius: 10px; padding: 1px 20px; border: 1px solid #ddd; margin-bottom: 20px; \\:hover { border-color: #0070f3; } `; const imageStyle = css` width: 100%; max-width: 400px; `; CreatePost.js The next component we\u0026rsquo;ll create is CreatePost. This component is a form which will be displayed to the user as a modal.\nThe props this component will receive are the following:\nupdateOverlayVisibility - This function will toggle the overlay to show/hide it updatePosts - This function will allow us to update the main posts array posts - The posts coming back from our API This component has a lot going on, so before we dive into the code, let\u0026rsquo;s walk through what is happening.\nWe create some initial state using the useState hook. This state is created using the initialState object. The onChangeText handler sets the name, description, and location fields of the post The onChangeImage handler allows the user to upload an image and saves it to state. It also creates a unique image name. The save function does the following: First checks to ensure that all of the form fields are populated Next it updates the saving state to true to show a saving indicator We then create a unique ID for the post using the uuid library Using the form state and the uuid, we create a post object that will be sent to the API Next, we upload the image to S3 using uploadData(), passing in the image name and the file Once the image upload is successful, we create the post in our GraphQL API Finally, we update the local state, close the popup, and update the local posts array with the new post import React, { useState } from \u0026#34;react\u0026#34;; import { css } from \u0026#34;@emotion/css\u0026#34;; import Button from \u0026#34;./Button\u0026#34;; import { v4 as uuid } from \u0026#34;uuid\u0026#34;; import { createPost } from \u0026#34;./graphql/mutations\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/api\u0026#34;; import { uploadData } from \u0026#34;aws-amplify/storage\u0026#34;; /* Initial state to hold form input, saving state */ const initialState = { name: \u0026#34;\u0026#34;, description: \u0026#34;\u0026#34;, image: {}, file: \u0026#34;\u0026#34;, location: \u0026#34;\u0026#34;, saving: false, }; export default function CreatePost({ updateOverlayVisibility, updatePosts, posts, user, }) { /* 1. Create local state with useState hook */ const [formState, updateFormState] = useState(initialState); const client = generateClient(); /* 2. onChangeText handler updates the form state when a user types into a form field */ function onChangeText(e) { e.persist(); updateFormState((currentState) =\u0026gt; ({ ...currentState, [e.target.name]: e.target.value, })); } /* 3. onChangeFile handler will be fired when a user uploads a file */ function onChangeFile(e) { e.persist(); if (!e.target.files[0]) return; const fileExtPosition = e.target.files[0].name.search(/.png|.jpg|.gif/i); const firstHalf = e.target.files[0].name.slice(0, fileExtPosition); const secondHalf = e.target.files[0].name.slice(fileExtPosition); const fileName = firstHalf + \u0026#34;_\u0026#34; + uuid() + secondHalf; console.log(fileName); const image = { fileInfo: e.target.files[0], name: fileName }; updateFormState((currentState) =\u0026gt; ({ ...currentState, file: URL.createObjectURL(e.target.files[0]), image, })); } const handleUpload = async (key, data) =\u0026gt; { // Upload a file with access level `guest` as the equivalent of `public` in v5 const operation = uploadData({ key, data, options: { accessLevel: \u0026#34;guest\u0026#34;, }, }); const result = await operation.result; }; /* 4. Save the post */ async function save() { try { const { name, description, location, image } = formState; if (!name || !description || !location || !image.name) return; updateFormState((currentState) =\u0026gt; ({ ...currentState, saving: true })); const postId = uuid(); const postInfo = { name, description, location, image: formState.image.name, id: postId, }; const result = handleUpload( formState.image.name, formState.image.fileInfo ); // await uploadData(formState.image.name, formState.image.fileInfo); await client.graphql({ query: createPost, variables: { input: postInfo }, authMode: \u0026#34;userPool\u0026#34;, }); updatePosts([ ...posts, { ...postInfo, image: formState.file, owner: user.username }, ]); // updated // updatePosts([...posts, { ...postInfo, image: formState.file }]); updateFormState((currentState) =\u0026gt; ({ ...currentState, saving: false })); updateOverlayVisibility(false); } catch (err) { console.log(\u0026#34;error: \u0026#34;, err); } } return ( \u0026lt;div className={containerStyle}\u0026gt; \u0026lt;input placeholder=\u0026#34;Post name\u0026#34; name=\u0026#34;name\u0026#34; className={inputStyle} onChange={onChangeText} /\u0026gt; \u0026lt;input placeholder=\u0026#34;Location\u0026#34; name=\u0026#34;location\u0026#34; className={inputStyle} onChange={onChangeText} /\u0026gt; \u0026lt;input placeholder=\u0026#34;Description\u0026#34; name=\u0026#34;description\u0026#34; className={inputStyle} onChange={onChangeText} /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; onChange={onChangeFile} /\u0026gt; {formState.file \u0026amp;\u0026amp; ( \u0026lt;img className={imageStyle} alt=\u0026#34;preview\u0026#34; src={formState.file} /\u0026gt; )} \u0026lt;Button title=\u0026#34;Create New Post\u0026#34; onClick={save} /\u0026gt; \u0026lt;Button type=\u0026#34;cancel\u0026#34; title=\u0026#34;Cancel\u0026#34; onClick={() =\u0026gt; updateOverlayVisibility(false)} /\u0026gt; {formState.saving \u0026amp;\u0026amp; \u0026lt;p className={savingMessageStyle}\u0026gt;Saving post...\u0026lt;/p\u0026gt;} \u0026lt;/div\u0026gt; ); } const inputStyle = css` margin-bottom: 10px; outline: none; padding: 7px; border: 1px solid #ddd; font-size: 16px; border-radius: 4px; `; const imageStyle = css` height: 120px; margin: 10px 0px; object-fit: contain; `; const containerStyle = css` display: flex; flex-direction: column; width: 400px; height: 420px; position: fixed; left: 0; border-radius: 4px; top: 0; margin-left: calc(50vw - 220px); margin-top: calc(50vh - 230px); background-color: white; border: 1px solid #ddd; box-shadow: rgba(0, 0, 0, 0.25) 0px 0.125rem 0.25rem; padding: 20px; `; const savingMessageStyle = css` margin-bottom: 0px; `; Post.js The next component that we\u0026rsquo;ll build is the Post component.\nIn this component, we will be reading the post id from the router parameters. We\u0026rsquo;ll then use this post id to make an API call to the GraphQL API to fetch the post details.\n// Post.js import React, { useState, useEffect } from \u0026#34;react\u0026#34;; import { css } from \u0026#34;@emotion/css\u0026#34;; import { useParams } from \u0026#34;react-router-dom\u0026#34;; import { getPost } from \u0026#34;./graphql/queries\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/api\u0026#34;; import { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;; export default function Post() { const [loading, updateLoading] = useState(true); const [post, updatePost] = useState(null); const client = generateClient(); const { id } = useParams(); useEffect(() =\u0026gt; { fetchPost(); }, []); const handleGetUrl = async (key) =\u0026gt; { const url = await getUrl({ key, options: { validateObjectExistence: true, }, }); return url.url.href; }; async function fetchPost() { try { const postData = await client.graphql({ query: getPost, variables: { id }, }); const currentPost = postData.data.getPost; const image = await handleGetUrl(currentPost.image); currentPost.image = image; updatePost(currentPost); updateLoading(false); } catch (err) { console.log(\u0026#34;error: \u0026#34;, err); } } if (loading) return \u0026lt;h3\u0026gt;Loading...\u0026lt;/h3\u0026gt;; return ( \u0026lt;\u0026gt; \u0026lt;h1 className={titleStyle}\u0026gt;{post.name}\u0026lt;/h1\u0026gt; \u0026lt;h3 className={locationStyle}\u0026gt;{post.location}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{post.description}\u0026lt;/p\u0026gt; \u0026lt;img alt=\u0026#34;post\u0026#34; src={post.image} className={imageStyle} /\u0026gt; \u0026lt;/\u0026gt; ); } const titleStyle = css` margin-bottom: 7px; `; const locationStyle = css` color: #0070f3; margin: 0; `; const imageStyle = css` max-width: 500px; @media (max-width: 500px) { width: 100%; } `; "
},
{
	"uri": "//localhost:1313/4-authentication/4.2-authfe/",
	"title": "Authentication in React",
	"tags": [],
	"description": "",
	"content": "Using the withAuthenticator component To add authentication in the React app, we\u0026rsquo;ll go into src/App.js and first import the withAuthenticator HOC (Higher Order Component) from @aws-amplify/ui-react:\n// src/App.js, import the withAuthenticator component and associated CSS import { withAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; Next, we\u0026rsquo;ll wrap our default export (the App component) with the withAuthenticator HOC:\nfunction App() { /* existing code here, no changes */ } /* src/App.js, change the default export to this: */ export default withAuthenticator(App); Now we can run the app and see that an Authentication flow has been added in front of our App component. This flow gives users the ability to sign up and sign in.\nClick \u0026ldquo;Sign Up\u0026rdquo; and follow the prompts to create an account. Be sure to use a real email address! Once you submit your user information, check your email for a confirmation email to complete the sign up.\nNow that you have the authentication service created, you can view it any time in the console by running the following command - select User Pool:\namplify console auth Using service: Cognito, provided by: awscloudformation ? Which console ❯ User Pool Identity Pool Both Add sign out button You can also easily add a preconfigured UI component for signing out. First, modify the App function signature.\nfunction App({ signOut, user }) { ... \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; ... \u0026lt;button onClick={signOut}\u0026gt;Sign out\u0026lt;/button\u0026gt; } Add some styling\nNext, let\u0026rsquo;s update the UI component styling. Open src/index.css and add the following styling:\n:root { --amplify-primary-color: #006eff; --amplify-primary-tint: #005ed9; --amplify-primary-shade: #005ed9; } See the result, you can click Sign out button to Sign out\nAccessing user data We can access the user\u0026rsquo;s info now that they are signed in by calling currentAuthenticatedUser() in useEffect. Add the following code to src/App.js in the appropriate places\nimport { getCurrentUser } from \u0026#34;aws-amplify/auth\u0026#34;; ... useEffect(() =\u0026gt; { fetchPosts(); currentAuthenticatedUser(); }, []); async function currentAuthenticatedUser() { try { const { username, userId } = await getCurrentUser(); console.log(`The username: ${username}`); console.log(`The userId: ${userId}`); } catch (err) { console.log(err); } } After saving these changes and reloading, you should see user information logged in the Developer Tools console of your browser.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createreactapp/",
	"title": "Create React App",
	"tags": [],
	"description": "",
	"content": "To get started, we first need to create a new React project using the Create React App CLI\nnpx create-react-app photogram Now change into the new app directory and install NPM packages for AWS Amplify, AWS Amplify UI React, react-router-dom, emotion, and uuid\ncd photogram npm install aws-amplify @emotion/css uuid react-router-dom@5 @aws-amplify/ui-react "
},
{
	"uri": "//localhost:1313/3-api/3.2-deployapi/",
	"title": "Deploying the API",
	"tags": [],
	"description": "",
	"content": "Deploying the API To deploy the API, run the push command:\namplify push Alternately, you can run amplify push -y to answer Yes to all questions.\nNow the API is live and you can start interacting with it!\nTesting the API To test it out we can use the GraphQL editor in the AppSync dashboard. To open the AppSync dashboard, run the following command:\namplify console api Alternatively, you can just navigate to the AppSync dashboard in the AWS console and search for your postagram-dev application.\nIn the AppSync dashboard, click on Queries to open the GraphiQL editor. In the editor, create a new post with the following mutation:\nmutation createPost { createPost( input: { name: \u0026#34;My first post\u0026#34; location: \u0026#34;New York\u0026#34; description: \u0026#34;Best burgers in NYC - Jackson Hole\u0026#34; } ) { id name location description } } Then, query get all the posts:\nquery listPosts { listPosts { items { id name location description } } } "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduce",
	"tags": [],
	"description": "",
	"content": "AWS Amplify streamlines full-stack app development. With its libraries, CLI, and services, you can easily connect your frontend to the cloud for authentication, storage, APIs, and more.\nAmplify empowers developers with a flexible collection of modular cloud services and libraries for fullstack application development.\nA developer could use Amplify’s data functionality for their fullstack app’s backend and frontend, just host their app’s frontend, or connect their user interface to an existing AWS resource like an Amazon S3 bucket. Amplify provides tooling for building app backends, connecting app frontend to backend resources, and hosting frontend apps. Amplify CLI - Configure all the services needed to power your backend through a simple command line interface.\nAmplify Libraries - Client libraries to build common use cases such as Auth, data, and File Storage by connecting your frontend app to your backend resources.\nAmplify Studio - Build your fullstack web and mobile app using a simple and intuitive visual development environment.\nAmplify UI Components - UI libraries to build your frontend app built for React, React Native, Angular, Vue and Flutter.\nAmplify Hosting - is an AWS service that provides a git-based workflow for continuous deployment \u0026amp; hosting of fullstack web apps.\nAmplify Authentication - lets you quickly set up secure authentication flows with a fully-managed user directory\nAmplify Storage - offers a simple mechanism for managing user-created content and app data. Store photos, audio, and video files for your app on device or in public, protected, or private storage modules in the cloud. Leverage cloud scale storage so that you can easily take your application from prototype to production.\n"
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.2-reactrouter/",
	"title": "React Router",
	"tags": [],
	"description": "",
	"content": "Next we need to create the router in App.js. Our app will have two main routes:\nA home route - /. This route will render a list of posts from our API A post details route - /post/:id. This route will render a single post and details about that post. Using React Router, we can read the Post ID from the route, and then fetch the post associated with it. This is a common pattern in many apps as it makes the link shareable.\nAnother way to do this would be to have some global state management set up and then set the post ID in the global state. The main drawback of this approach is that the URL cannot be shared.\nOther than routing, the main functionality happening in this component is a call to fetch posts from our GraphQL API.\n// src/App.js import React, { useEffect, useState } from \u0026#34;react\u0026#34;; import { withAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/api\u0026#34;; // import query definition import { listPosts } from \u0026#34;./graphql/queries\u0026#34;; import Button from \u0026#34;./Button\u0026#34;; import CreatePost from \u0026#34;./CreatePost\u0026#34;; import Header from \u0026#34;./Header\u0026#34;; import Post from \u0026#34;./Post\u0026#34;; import Posts from \u0026#34;./Posts\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; import { css } from \u0026#34;@emotion/css\u0026#34;; import { HashRouter, Route, Switch } from \u0026#34;react-router-dom\u0026#34;; import { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;; function Router({ user, signOut }) { /* create a couple of pieces of initial state */ const [showOverlay, updateOverlayVisibility] = useState(false); const [posts, updatePosts] = useState([]); const client = generateClient(); const [myPosts, updateMyPosts] = useState([]); /* fetch posts when component loads */ useEffect(() =\u0026gt; { fetchPosts(); }, []); const handleGetUrl = async (key) =\u0026gt; { const url = await getUrl({ key, options: { validateObjectExistence: true, }, }); return url.url.href; }; async function fetchPosts() { /* query the API, ask for 100 items */ let postData = await client.graphql({ query: listPosts, variables: { limit: 100 }, }); let postsArray = postData.data.listPosts.items; setPostState(postsArray); /* map over the image keys in the posts array, get signed image URLs for each image */ postsArray = await Promise.all( postsArray.map(async (post) =\u0026gt; { if (post.image) { try { const imageURL = await handleGetUrl(post.image); post.image = imageURL; return post; } catch (error) { if (error.code === \u0026#34;NotFound\u0026#34;) { console.error(\u0026#34;Image not found for post:\u0026#34;, post.id); } else { console.error( \u0026#34;Error fetching image URL for post:\u0026#34;, post.id, error ); } return post; } } }) ); /* update the posts array in the local state */ setPostState(postsArray); } async function setPostState(postsArray) { const myPostData = postsArray.filter((p) =\u0026gt; p.owner === user.username); updateMyPosts(myPostData); updatePosts(postsArray); } return ( \u0026lt;\u0026gt; \u0026lt;HashRouter\u0026gt; \u0026lt;div className={contentStyle}\u0026gt; \u0026lt;Header /\u0026gt; \u0026lt;hr className={dividerStyle} /\u0026gt; \u0026lt;Button title=\u0026#34;New Post\u0026#34; onClick={() =\u0026gt; updateOverlayVisibility(true)} /\u0026gt; \u0026lt;Switch\u0026gt; \u0026lt;Route exact path=\u0026#34;/\u0026#34;\u0026gt; \u0026lt;Posts posts={posts} /\u0026gt; \u0026lt;/Route\u0026gt; \u0026lt;Route path=\u0026#34;/post/:id\u0026#34;\u0026gt; \u0026lt;Post /\u0026gt; \u0026lt;/Route\u0026gt; \u0026lt;Route exact path=\u0026#34;/myposts\u0026#34;\u0026gt; \u0026lt;Posts posts={myPosts} /\u0026gt; \u0026lt;/Route\u0026gt; \u0026lt;/Switch\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button onClick={signOut}\u0026gt;Sign out\u0026lt;/button\u0026gt; \u0026lt;/HashRouter\u0026gt; {showOverlay \u0026amp;\u0026amp; ( \u0026lt;CreatePost updateOverlayVisibility={updateOverlayVisibility} updatePosts={setPostState} posts={posts} user={user} /\u0026gt; )} \u0026lt;/\u0026gt; ); } const dividerStyle = css` margin-top: 15px; `; const contentStyle = css` min-height: calc(100vh - 45px); padding: 0px 40px; `; export default withAuthenticator(Router); "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.3-tryitout/",
	"title": "Try it out",
	"tags": [],
	"description": "",
	"content": "Deleting the existing data Now the app is ready to test out, but before we do let\u0026rsquo;s delete the existing data in the database. To do so, follow these steps:\nOpen the Amplify console amplify console Click on API, then click on PostTable under the Data sources tab.\nClick on the Explore table items tab. Select the items in the database and delete them by choosing Delete from the Actions button.\n"
},
{
	"uri": "//localhost:1313/3-api/3.3-usingapi/",
	"title": "Using GraphQL with React",
	"tags": [],
	"description": "",
	"content": "Now, our API is created \u0026amp; we can test it out in our app!\nThe first thing we need to do is to configure our React application to be aware of our Amplify project. We can do this by referencing the auto-generated aws-exports.js file that is now in our src folder.\nTo configure the app, open src/index.js and add the following code below the last import:\nimport { Amplify } from \u0026#34;aws-amplify\u0026#34;; import config from \u0026#34;./aws-exports\u0026#34;; Amplify.configure(config); Now, our app is ready to start using our AWS services\nInteracting with the GraphQL API from our client application - Querying for data Now that the GraphQL API is running we can begin interacting with it. The first thing we\u0026rsquo;ll do is perform a query to fetch data from our API.\nTo do so, we need to:\nDefine the query Execute the query Store the returned data in our app state List the items in our UI The main thing to notice in this component is the API call. Take a look at this piece of code:\n/* Call client.graphql, passing in the query that we\u0026#39;d like to execute. */ import { generateClient } from \u0026#34;aws-amplify/api\u0026#34;; const client = generateClient(); const postData = await client.graphql({ query: listPosts }); src/App.js Update your src/App.js file with the following code, which incorporates the snippet above - calling the GraphQL API\nimport React, { useState, useEffect } from \u0026#34;react\u0026#34;; import { generateClient } from \u0026#34;aws-amplify/api\u0026#34;; import { listPosts } from \u0026#34;./graphql/queries\u0026#34;; export default function App() { const [posts, setPosts] = useState([]); const client = generateClient(); useEffect(() =\u0026gt; { fetchPosts(); }, []); async function fetchPosts() { try { const postData = await client.graphql({ query: listPosts }); setPosts(postData.data.listPosts.items); } catch (err) { console.log({ err }); } } return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; {posts.map((post) =\u0026gt; ( \u0026lt;div key={post.id}\u0026gt; \u0026lt;h3\u0026gt;{post.name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{post.location}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{post.description}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; ); } In the above code we are using client.graphql to call the GraphQL API, and then taking the result from that API call and storing the data in our state. This should be the list of posts you created via the GraphQL editor.\nNext, test the app - in the terminal type:\nnpm start All the posts displayed here!\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-configamplify/",
	"title": "Configure Amplify",
	"tags": [],
	"description": "",
	"content": "Installing the CLI npm install -g @aws-amplify/cli Now we need to configure the CLI with our credentials.\namplify configure - Specify the AWS Region: us-east-1 || us-west-2 || eu-central-1 - Specify the username of the new IAM user: amplify-cli-user \u0026gt; In the AWS Console, click Next: Permissions, Next: Tags, Next: Review, \u0026amp; Create User to create the new IAM user. Then return to the command line \u0026amp; press Enter. - Enter the access key of the newly created user: ? accessKeyId:(\u0026lt;YOUR_ACCESS_KEY_ID\u0026gt;) ? secretAccessKey: (\u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt;) - Profile Name: amplify-cli-user Initializing a new project amplify init The Amplify CLI has initialized a new project, and you will see a new folder: amplify, as well as a new file called aws-exports.js in the src directory. These files contain your project configuration.\nTo view the status of the amplify project at any time, you can run the Amplify status command:\namplify status To launch a new browser window and view the Amplify project in the Amplify console at any time, run the console command:\namplify console "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rWe need to prepare a basic React App and config Amplify in this section\nTo learn more about Create React App and Config Amplify, you can refer to the docs:\nAbout React App About Amplify Content Create React App Config Amplify "
},
{
	"uri": "//localhost:1313/4-authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "In this section we\u0026rsquo;ll add authentication to our app, using AWS Cognito and the provided NPM module from @aws-amplify/ui-react\nNội dung Authentication in API Authentication in React "
},
{
	"uri": "//localhost:1313/5-storage/",
	"title": "Image Storage with Amazon S3",
	"tags": [],
	"description": "",
	"content": "To add image storage, we\u0026rsquo;ll use Amazon S3, which can be configured and created via the Amplify CLI:\namplify add storage To deploy the service, run the following command:\namplify push To save items to S3, we use the Storage API. The Storage API works like this.\nSaving an item import { uploadData } from \u0026#34;aws-amplify/storage\u0026#34;; const handleUpload = async (key, data) =\u0026gt; { const operation = uploadData({ key, data, options: { accessLevel: \u0026#34;guest\u0026#34;, }, }); const result = await operation.result; }; Retrieving an item import { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;; const handleGetUrl = async (key) =\u0026gt; { const res = await getUrl({ key, options: { validateObjectExistence: true, }, }); return res.url.href; }; Now we can start saving images to S3 and we can continue building the Photo Sharing App.\n"
},
{
	"uri": "//localhost:1313/6-photosharingapp/",
	"title": "Photo Sharing App",
	"tags": [],
	"description": "",
	"content": "In this section we\u0026rsquo;ll add authentication to our app, using AWS Cognito and the provided NPM module from @aws-amplify/ui-react\nNội dung Build component React Router Try it out Add auth for API Adding Authorization to the GraphQL API Hosting "
},
{
	"uri": "//localhost:1313/3-api/",
	"title": "Using GraphQL with React",
	"tags": [],
	"description": "",
	"content": "In this step, we will create APIs and deploy them by Amplify. We choose GraphQL API\nNội dung Tạo GraphQL API Deploy API Using API "
},
{
	"uri": "//localhost:1313/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "We will take the following steps to delete the resources we created in this exercise.\nDelete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]