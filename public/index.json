[
{
	"uri": "//localhost:1313/4-authentication/4.1-authapi/",
	"title": "Add Authentication",
	"tags": [],
	"description": "",
	"content": "Next, let\u0026rsquo;s update the app to add authentication. To add the authentication service, we can use the following command:\namplify add auth To deploy the authentication service, you can run the push command:\namplify push When this step completes you will have authentication services set up in Amazon Cognito. To see more information, you can run the console command:\namplify console auth Choose User Pool\n"
},
{
	"uri": "//localhost:1313/3-api/3.1-graphqlapi/",
	"title": "Adding a GraphQL API",
	"tags": [],
	"description": "",
	"content": "To add a GraphQL API, we can use the following command:\namplify add api The CLI should open this GraphQL schema in your text editor or IDE. If it doesnt, click on the link provided in the console to see this file amplify/backend/api/photogram/schema.graphql\nUpdate the schema to the following:\ninput AMPLIFY {\rglobalAuthRule: AuthRule = { allow: public }\r}\rtype Post @model {\rid: ID!\rname: String!\rlocation: String!\rdescription: String!\rimage: String\r} After saving the schema, go back to the CLI and press enter. If Amplify was unable to launch your code editor from the CLI, and you navigated to the schema.graphql file and edited it, you\u0026rsquo;ll need to manually incorporate that schma change by running the following.\namplify build "
},
{
	"uri": "//localhost:1313/",
	"title": "Amplify Photo Sharing Workshop",
	"tags": [],
	"description": "",
	"content": "Overview This workshop is intended for software developers with some experience building web applications to learn how to build a full stack cloud application with React, GraphQL, \u0026amp; Amplify . Everything we\u0026rsquo;ll build during the workshop is eligible for AWS\u0026rsquo;s free-tier pricing, however to ensure you don\u0026rsquo;t incur any unexpected costs, be sure to follow the instructions in the cleanup section and remove all the resources you\u0026rsquo;ve created.\nAn understanding of software development and prior experience with the React framework are recommended but not required. Allow around two hours to get through all of the content, and slightly longer if you want to tackle the Extra Credit section!\nContent Introduction Preparation API Authentication Storage Photo Sharing App Clean up resources "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.1-appsetup/",
	"title": "App Setup",
	"tags": [],
	"description": "",
	"content": "Creating the folder structure for our app Next, create the following files in the src directory:\nButton.js CreatePost.js Header.js Post.js Posts.js Next, we\u0026rsquo;ll go one by one and update these files with our new code.\nButton.js import React from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rexport default function Button({ title, onClick, type = \u0026#34;action\u0026#34; }) {\rreturn (\r\u0026lt;button className={buttonStyle(type)} onClick={onClick}\u0026gt;\r{title}\r\u0026lt;/button\u0026gt;\r);\r}\rconst buttonStyle = (type) =\u0026gt; css`\rbackground-color: ${type === \u0026#34;action\u0026#34; ? \u0026#34;black\u0026#34; : \u0026#34;red\u0026#34;};\rheight: 40px;\rwidth: 160px;\rfont-weight: 600;\rfont-size: 16px;\rcolor: white;\routline: none;\rborder: none;\rmargin-top: 5px;\rcursor: pointer;\r\\:hover {\rbackground-color: #363636;\r}\r`; Header.js import React from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { Link } from \u0026#34;react-router-dom\u0026#34;;\rexport default function Header() {\rreturn (\r\u0026lt;div className={headerContainer}\u0026gt;\r\u0026lt;h1 className={headerStyle}\u0026gt;Postagram\u0026lt;/h1\u0026gt;\r\u0026lt;Link to=\u0026#34;/\u0026#34; className={linkStyle}\u0026gt;\rAll Posts\r\u0026lt;/div\u0026gt;\r);\r}\rconst headerContainer = css`\rpadding-top: 20px;\r`;\rconst headerStyle = css`\rfont-size: 40px;\rmargin-top: 0px;\r`;\rconst linkStyle = css`\rcolor: black;\rfont-weight: bold;\rtext-decoration: none;\rmargin-right: 10px;\r\\:hover {\rcolor: #058aff;\r}\r`; Posts.js The next thing we\u0026rsquo;ll create the Posts component to render a list of posts, this will go in the main view of the app. The only data from the post that will be rendered in this view is the post name and post image.\nThe posts array will be passed in as a prop to the Posts component.\nimport React from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { Link } from \u0026#34;react-router-dom\u0026#34;;\rexport default function Posts({ posts = [] }) {\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;h1\u0026gt;Posts\u0026lt;/h1\u0026gt;\r{posts.map((post) =\u0026gt; (\r\u0026lt;Link to={`/post/${post?.id}`} className={linkStyle} key={post?.id}\u0026gt;\r\u0026lt;div key={post?.id} className={postContainer}\u0026gt;\r\u0026lt;h1 className={postTitleStyle}\u0026gt;{post?.name}\u0026lt;/h1\u0026gt;\r\u0026lt;img alt=\u0026#34;post\u0026#34; className={imageStyle} src={post?.image} /\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/Link\u0026gt;\r))}\r\u0026lt;/\u0026gt;\r);\r}\rconst postTitleStyle = css`\rmargin: 15px 0px;\rcolor: #0070f3;\r`;\rconst linkStyle = css`\rtext-decoration: none;\r`;\rconst postContainer = css`\rborder-radius: 10px;\rpadding: 1px 20px;\rborder: 1px solid #ddd;\rmargin-bottom: 20px;\r\\:hover {\rborder-color: #0070f3;\r}\r`;\rconst imageStyle = css`\rwidth: 100%;\rmax-width: 400px;\r`; CreatePost.js The next component we\u0026rsquo;ll create is CreatePost. This component is a form to create post which will be displayed to the user as a modal.\nThe props this component will receive are the following:\nupdateOverlayVisibility - This function will toggle to show/hide modal updatePosts - This function will allow us to update the main posts array posts - The posts coming back from our API This component has a lot going on, so before we dive into the code, let\u0026rsquo;s walk through what is happening.\nWe create some initial state using the useState hook. This state is created using the initialState object. The onChangeText handler sets the name, description, and location fields of the post The onChangeImage handler allows the user to upload an image and saves it to state. It also creates a unique image name. The save function does the following: First checks to ensure that all of the form fields are populated Next it updates the saving state to true to show a saving indicator We then create a unique ID for the post using the uuid library Using the form state and the uuid, we create a post object that will be sent to the API Next, we upload the image to S3 using uploadData(), passing in the image name and the file Once the image upload is successful, we create the post in our GraphQL API Finally, we update the local state, close the popup, and update the local posts array with the new post import React, { useState } from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport Button from \u0026#34;./Button\u0026#34;;\rimport { v4 as uuid } from \u0026#34;uuid\u0026#34;;\rimport { createPost } from \u0026#34;./graphql/mutations\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rimport { uploadData } from \u0026#34;aws-amplify/storage\u0026#34;;\r/* Initial state to hold form input, saving state */\rconst initialState = {\rname: \u0026#34;\u0026#34;,\rdescription: \u0026#34;\u0026#34;,\rimage: {},\rfile: \u0026#34;\u0026#34;,\rlocation: \u0026#34;\u0026#34;,\rsaving: false,\r};\rexport default function CreatePost({\rupdateOverlayVisibility,\rupdatePosts,\rposts,\ruser,\r}) {\r/* 1. Create local state with useState hook */\rconst [formState, updateFormState] = useState(initialState);\rconst client = generateClient();\r/* 2. onChangeText handler updates the form state when a user types into a form field */\rfunction onChangeText(e) {\re.persist();\rupdateFormState((currentState) =\u0026gt; ({\r...currentState,\r[e.target.name]: e.target.value,\r}));\r}\r/* 3. onChangeFile handler will be fired when a user uploads a file */\rfunction onChangeFile(e) {\re.persist();\rif (!e.target.files[0]) return;\rconst fileExtPosition = e.target.files[0].name.search(/.png|.jpg|.gif/i);\rconst firstHalf = e.target.files[0].name.slice(0, fileExtPosition);\rconst secondHalf = e.target.files[0].name.slice(fileExtPosition);\rconst fileName = firstHalf + \u0026#34;_\u0026#34; + uuid() + secondHalf;\rconst image = { fileInfo: e.target.files[0], name: fileName };\rupdateFormState((currentState) =\u0026gt; ({\r...currentState,\rfile: URL.createObjectURL(e.target.files[0]),\rimage,\r}));\r}\rconst handleUpload = async (key, data) =\u0026gt; {\r// Upload a file with access level `guest` as the equivalent of `public` in v5\rconst operation = uploadData({\rkey,\rdata,\roptions: {\raccessLevel: \u0026#34;guest\u0026#34;,\r},\r});\rconst result = await operation.result;\rreturn result;\r};\r/* 4. Save the post */\rasync function save() {\rconsole.log(\u0026#34;save\u0026#34;);\rtry {\rconst { name, description, location, image } = formState;\rif (!name || !description || !location || !image.name) return;\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: true }));\rconst postId = uuid();\rconst postInfo = {\rname,\rdescription,\rlocation,\rimage: formState.image.name,\rid: postId,\r};\rconst result = handleUpload(\rformState.image.name,\rformState.image.fileInfo\r);\rawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\r});\rupdatePosts([...posts, { ...postInfo, image: formState.file }]);\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: false }));\rupdateOverlayVisibility(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r}\rreturn (\r\u0026lt;div className={containerStyle}\u0026gt;\r\u0026lt;input\rplaceholder=\u0026#34;Post name\u0026#34;\rname=\u0026#34;name\u0026#34;\rclassName={inputStyle}\ronChange={onChangeText}\r/\u0026gt;\r\u0026lt;input\rplaceholder=\u0026#34;Location\u0026#34;\rname=\u0026#34;location\u0026#34;\rclassName={inputStyle}\ronChange={onChangeText}\r/\u0026gt;\r\u0026lt;input\rplaceholder=\u0026#34;Description\u0026#34;\rname=\u0026#34;description\u0026#34;\rclassName={inputStyle}\ronChange={onChangeText}\r/\u0026gt;\r\u0026lt;input type=\u0026#34;file\u0026#34; onChange={onChangeFile} /\u0026gt;\r{formState.file \u0026amp;\u0026amp; (\r\u0026lt;img className={imageStyle} alt=\u0026#34;preview\u0026#34; src={formState.file} /\u0026gt;\r)}\r\u0026lt;Button title=\u0026#34;Create New Post\u0026#34; onClick={save} /\u0026gt;\r\u0026lt;Button\rtype=\u0026#34;cancel\u0026#34;\rtitle=\u0026#34;Cancel\u0026#34;\ronClick={() =\u0026gt; updateOverlayVisibility(false)}\r/\u0026gt;\r{formState.saving \u0026amp;\u0026amp; \u0026lt;p className={savingMessageStyle}\u0026gt;Saving post...\u0026lt;/p\u0026gt;}\r\u0026lt;/div\u0026gt;\r);\r}\rconst inputStyle = css`\rmargin-bottom: 10px;\routline: none;\rpadding: 7px;\rborder: 1px solid #ddd;\rfont-size: 16px;\rborder-radius: 4px;\r`;\rconst imageStyle = css`\rheight: 120px;\rmargin: 10px 0px;\robject-fit: contain;\r`;\rconst containerStyle = css`\rdisplay: flex;\rflex-direction: column;\rwidth: 400px;\rheight: 420px;\rposition: fixed;\rleft: 0;\rborder-radius: 4px;\rtop: 0;\rmargin-left: calc(50vw - 220px);\rmargin-top: calc(50vh - 230px);\rbackground-color: white;\rborder: 1px solid #ddd;\rbox-shadow: rgba(0, 0, 0, 0.25) 0px 0.125rem 0.25rem;\rpadding: 20px;\r`;\rconst savingMessageStyle = css`\rmargin-bottom: 0px;\r`; Post.js The next component that we\u0026rsquo;ll build is the Post component.\nIn this component, we will be reading the post id from the router parameters. We\u0026rsquo;ll then use this post id to make an API call to the GraphQL API to fetch the post details.\n// Post.js\rimport React, { useState, useEffect } from \u0026#34;react\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { useParams } from \u0026#34;react-router-dom\u0026#34;;\rimport { getPost } from \u0026#34;./graphql/queries\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rimport { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;;\rexport default function Post() {\rconst [loading, updateLoading] = useState(true);\rconst [post, updatePost] = useState(null);\rconst client = generateClient();\rconst { id } = useParams();\ruseEffect(() =\u0026gt; {\rfetchPost();\r}, []);\rconst handleGetUrl = async (key) =\u0026gt; {\rconst url = await getUrl({\rkey,\roptions: {\rvalidateObjectExistence: true,\r},\r});\rreturn url.url.href;\r};\rasync function fetchPost() {\rtry {\rconst postData = await client.graphql({\rquery: getPost,\rvariables: { id },\r});\rconst currentPost = postData.data.getPost;\rconst image = await handleGetUrl(currentPost.image);\rcurrentPost.image = image;\rupdatePost(currentPost);\rupdateLoading(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r}\rif (loading) return \u0026lt;h3\u0026gt;Loading...\u0026lt;/h3\u0026gt;;\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;h1 className={titleStyle}\u0026gt;{post.name}\u0026lt;/h1\u0026gt;\r\u0026lt;h3 className={locationStyle}\u0026gt;{post.location}\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;{post.description}\u0026lt;/p\u0026gt;\r\u0026lt;img alt=\u0026#34;post\u0026#34; src={post.image} className={imageStyle} /\u0026gt;\r\u0026lt;/\u0026gt;\r);\r}\rconst titleStyle = css`\rmargin-bottom: 7px;\r`;\rconst locationStyle = css`\rcolor: #0070f3;\rmargin: 0;\r`;\rconst imageStyle = css`\rmax-width: 500px;\r@media (max-width: 500px) {\rwidth: 100%;\r}\r`; "
},
{
	"uri": "//localhost:1313/4-authentication/4.2-authfe/",
	"title": "Authentication in React",
	"tags": [],
	"description": "",
	"content": "Using the withAuthenticator component To add authentication in the React app, we\u0026rsquo;ll go into src/App.js and first import the withAuthenticator HOC (Higher Order Component) from @aws-amplify/ui-react:\n// src/App.js, import the withAuthenticator component and associated CSS\rimport { withAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; Next, we\u0026rsquo;ll wrap our default export (the App component) with the withAuthenticator HOC:\nfunction App() {\r/* existing code here, no changes */\r}\r/* src/App.js, change the default export to this: */\rexport default withAuthenticator(App); Now we can run the app and see that an Authentication flow has been added in front of our App component. This flow gives users the ability to sign up and sign in.\nClick \u0026ldquo;Sign Up\u0026rdquo; and follow the prompts to create an account. Be sure to use a real email address! Once you submit your user information, check your email for a confirmation email to complete the sign up.\nNow that you have the authentication service created, you can view it any time in the console by running the following command - select User Pool:\namplify console auth\rUsing service: Cognito, provided by: awscloudformation\r? Which console\r❯ User Pool\rIdentity Pool\rBoth Add sign out button You can also easily add a preconfigured UI component for signing out. First, modify the App function signature.\nfunction App({ signOut, user }) {\r...\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r...\r\u0026lt;button onClick={signOut}\u0026gt;Sign out\u0026lt;/button\u0026gt;\r} Add some styling\nNext, let\u0026rsquo;s update the UI component styling. Open src/index.css and add the following styling:\n:root {\r--amplify-primary-color: #006eff;\r--amplify-primary-tint: #005ed9;\r--amplify-primary-shade: #005ed9;\r} See the result, you can click Sign out button to Sign out\nAccessing user data We can access the user\u0026rsquo;s info now that they are signed in by calling currentAuthenticatedUser() in useEffect. Add the following code to src/App.js in the appropriate places\nimport { getCurrentUser } from \u0026#34;aws-amplify/auth\u0026#34;;\r...\ruseEffect(() =\u0026gt; {\rfetchPosts();\rcurrentAuthenticatedUser();\r}, []);\rasync function currentAuthenticatedUser() {\rtry {\rconst { username, userId } = await getCurrentUser();\rconsole.log(`The username: ${username}`);\rconsole.log(`The userId: ${userId}`);\r} catch (err) {\rconsole.log(err);\r}\r} After saving these changes and reloading, you should see user information logged in the Developer Tools console of your browser.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-createreactapp/",
	"title": "Create React App",
	"tags": [],
	"description": "",
	"content": "To get started, we first need to create a new React project using the Create React App CLI\nnpx create-react-app photogram Now change into the new app directory and install NPM packages for AWS Amplify, AWS Amplify UI React, react-router-dom, emotion, and uuid\ncd photogram\rnpm install aws-amplify @emotion/css uuid react-router-dom@5 @aws-amplify/ui-react "
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduce",
	"tags": [],
	"description": "",
	"content": "AWS Amplify streamlines full-stack app development. With its libraries, CLI, and services, you can easily connect your frontend to the cloud for authentication, storage, APIs, and more.\nAmplify empowers developers with a flexible collection of modular cloud services and libraries for fullstack application development.\nA developer could use Amplify’s data functionality for their fullstack app’s backend and frontend, just host their app’s frontend, or connect their user interface to an existing AWS resource like an Amazon S3 bucket. Amplify provides tooling for building app backends, connecting app frontend to backend resources, and hosting frontend apps. Amplify CLI - Configure all the services needed to power your backend through a simple command line interface.\nAmplify Libraries - Client libraries to build common use cases such as Auth, data, and File Storage by connecting your frontend app to your backend resources.\nAmplify Studio - Build your fullstack web and mobile app using a simple and intuitive visual development environment.\nAmplify UI Components - UI libraries to build your frontend app built for React, React Native, Angular, Vue and Flutter.\nAmplify Hosting - is an AWS service that provides a git-based workflow for continuous deployment \u0026amp; hosting of fullstack web apps.\nAmplify Authentication - lets you quickly set up secure authentication flows with a fully-managed user directory\nAmplify Storage - offers a simple mechanism for managing user-created content and app data. Store photos, audio, and video files for your app on device or in public, protected, or private storage modules in the cloud. Leverage cloud scale storage so that you can easily take your application from prototype to production.\n"
},
{
	"uri": "//localhost:1313/3-api/3.3-usingapi/",
	"title": "Using GraphQL with React",
	"tags": [],
	"description": "",
	"content": "Now, our API is created \u0026amp; we can test it out in our app!\nThe first thing we need to do is to configure our React application to be aware of our Amplify project. We can do this by referencing the auto-generated aws-exports.js file that is now in our src folder.\nTo configure the app, open src/index.js and add the following code below the last import:\nimport { Amplify } from \u0026#34;aws-amplify\u0026#34;;\rimport config from \u0026#34;./aws-exports\u0026#34;;\rAmplify.configure(config); Now, our app is ready to start using our AWS services\nInteracting with the GraphQL API from our client application - Querying for data Now that the GraphQL API is running we can begin interacting with it. The first thing we\u0026rsquo;ll do is perform a query to fetch data from our API.\nTo do so, we need to:\nDefine the query Execute the query Store the returned data in our app state List the items in our UI The main thing to notice in this component is the API call. Take a look at this piece of code:\n/* Call client.graphql, passing in the query that we\u0026#39;d like to execute. */\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rconst client = generateClient();\rconst postData = await client.graphql({ query: listPosts }); src/App.js Update your src/App.js file with the following code, which incorporates the snippet above - calling the GraphQL API\nimport React, { useState, useEffect } from \u0026#34;react\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\rimport { listPosts } from \u0026#34;./graphql/queries\u0026#34;;\rexport default function App() {\rconst [posts, setPosts] = useState([]);\rconst client = generateClient();\ruseEffect(() =\u0026gt; {\rfetchPosts();\r}, []);\rasync function fetchPosts() {\rtry {\rconst postData = await client.graphql({ query: listPosts });\rsetPosts(postData.data.listPosts.items);\r} catch (err) {\rconsole.log({ err });\r}\r}\rreturn (\r\u0026lt;div\u0026gt;\r\u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt;\r{posts.map((post) =\u0026gt; (\r\u0026lt;div key={post.id}\u0026gt;\r\u0026lt;h3\u0026gt;{post.name}\u0026lt;/h3\u0026gt;\r\u0026lt;p\u0026gt;{post.location}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{post.description}\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\r))}\r\u0026lt;/div\u0026gt;\r);\r} In the above code we are using client.graphql to call the GraphQL API, and then taking the result from that API call and storing the data in our state. This should be the list of posts you created via the GraphQL editor.\nNext, test the app - in the terminal type:\nnpm start All the posts displayed here!\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-configamplify/",
	"title": "Configure Amplify",
	"tags": [],
	"description": "",
	"content": "Installing the CLI npm install -g @aws-amplify/cli Now we need to configure the CLI with our credentials.\namplify configure\r- Specify the AWS Region: us-east-1 || us-west-2 ||\reu-central-1 - Specify the username of the new IAM user: amplify-cli-user \u0026gt; In\rthe AWS Console, click Next: Permissions, Next: Tags, Next: Review, \u0026amp; Create\rUser to create the new IAM user. Then return to the command line \u0026amp; press Enter.\r- Enter the access key of the newly created user:\r? accessKeyId:(\u0026lt;YOUR_ACCESS_KEY_ID\u0026gt;)\r? secretAccessKey: (\u0026lt;YOUR_SECRET_ACCESS_KEY\u0026gt;)\r- Profile Name: amplify-cli-user Initializing a new project amplify init The Amplify CLI has initialized a new project, and you will see a new folder: amplify, as well as a new file called aws-exports.js in the src directory. These files contain your project configuration.\nTo view the status of the amplify project at any time, you can run the Amplify status command:\namplify status To launch a new browser window and view the Amplify project in the Amplify console at any time, run the console command:\namplify console "
},
{
	"uri": "//localhost:1313/3-api/3.2-deployapi/",
	"title": "Deploying the API",
	"tags": [],
	"description": "",
	"content": "Deploying the API To deploy the API, run the push command:\namplify push Alternately, you can run amplify push -y to answer Yes to all questions.\nNow the API is live and you can start interacting with it!\nTesting the API To test it out we can use the GraphQL editor in the AppSync dashboard. To open the AppSync dashboard, run the following command:\namplify console api Alternatively, you can just navigate to the AppSync dashboard in the AWS console and search for your postagram-dev application.\nIn the AppSync dashboard, click on Queries to open the GraphiQL editor. In the editor, create a new post with the following mutation:\nmutation createPost {\rcreatePost(\rinput: {\rname: \u0026#34;My first post\u0026#34;\rlocation: \u0026#34;New York\u0026#34;\rdescription: \u0026#34;Best burgers in NYC - Jackson Hole\u0026#34;\r}\r) {\rid\rname\rlocation\rdescription\r}\r} Then, query get all the posts:\nquery listPosts {\rlistPosts {\ritems {\rid\rname\rlocation\rdescription\r}\r}\r} "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "\rWe need to prepare a basic React App and config Amplify in this section\nTo learn more about Create React App and Config Amplify, you can refer to the docs:\nAbout React App About Amplify Content Create React App Config Amplify "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.2-reactrouter/",
	"title": "React Router",
	"tags": [],
	"description": "",
	"content": "Next we need to create the router in App.js. Our app will have two main routes:\nA home route - /. This route will render a list of posts from our API A post details route - /post/:id. This route will render a single post and details about that post. Using React Router, we can read the Post ID from the route, and then fetch the post associated with it. This is a common pattern in many apps as it makes the link shareable.\n// src/App.js\rimport React, { useEffect, useState } from \u0026#34;react\u0026#34;;\rimport { withAuthenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;;\rimport \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;;\rimport { generateClient } from \u0026#34;aws-amplify/api\u0026#34;;\r// import query definition\rimport { listPosts } from \u0026#34;./graphql/queries\u0026#34;;\rimport Button from \u0026#34;./Button\u0026#34;;\rimport CreatePost from \u0026#34;./CreatePost\u0026#34;;\rimport Header from \u0026#34;./Header\u0026#34;;\rimport Post from \u0026#34;./Post\u0026#34;;\rimport Posts from \u0026#34;./Posts\u0026#34;;\rimport \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;;\rimport { css } from \u0026#34;@emotion/css\u0026#34;;\rimport { HashRouter, Route, Switch } from \u0026#34;react-router-dom\u0026#34;;\rimport { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;;\rfunction Router({ user, signOut }) {\r/* create a couple of pieces of initial state */\rconst [showOverlay, updateOverlayVisibility] = useState(false);\rconst [posts, updatePosts] = useState([]);\rconst client = generateClient();\rconst [myPosts, updateMyPosts] = useState([]);\r/* fetch posts when component loads */\ruseEffect(() =\u0026gt; {\rfetchPosts();\r}, []);\rconst handleGetUrl = async (key) =\u0026gt; {\rconst url = await getUrl({\rkey,\roptions: {\rvalidateObjectExistence: true,\r},\r});\rreturn url.url.href;\r};\rasync function fetchPosts() {\r/* query the API, ask for 100 items */\rlet postData = await client.graphql({\rquery: listPosts,\rvariables: { limit: 100 },\r});\rlet postsArray = postData.data.listPosts.items;\rsetPostState(postsArray);\r/* map over the image keys in the posts array, get signed image URLs for each image */\rpostsArray = await Promise.all(\rpostsArray.map(async (post) =\u0026gt; {\rif (post.image) {\rtry {\rconst imageURL = await handleGetUrl(post.image);\rpost.image = imageURL;\rreturn post;\r} catch (error) {\rif (error.code === \u0026#34;NotFound\u0026#34;) {\rconsole.error(\u0026#34;Image not found for post:\u0026#34;, post.id);\r} else {\rconsole.error(\r\u0026#34;Error fetching image URL for post:\u0026#34;,\rpost.id,\rerror\r);\r}\rreturn post;\r}\r}\r})\r);\r/* update the posts array in the local state */\rsetPostState(postsArray);\r}\rasync function setPostState(postsArray) {\rconst myPostData = postsArray.filter((p) =\u0026gt; p.owner === user.username);\rupdateMyPosts(myPostData);\rupdatePosts(postsArray);\r}\rreturn (\r\u0026lt;\u0026gt;\r\u0026lt;HashRouter\u0026gt;\r\u0026lt;div className={contentStyle}\u0026gt;\r\u0026lt;Header /\u0026gt;\r\u0026lt;hr className={dividerStyle} /\u0026gt;\r\u0026lt;Button\rtitle=\u0026#34;New Post\u0026#34;\ronClick={() =\u0026gt; updateOverlayVisibility(true)}\r/\u0026gt;\r\u0026lt;Switch\u0026gt;\r\u0026lt;Route exact path=\u0026#34;/\u0026#34;\u0026gt;\r\u0026lt;Posts posts={posts} /\u0026gt;\r\u0026lt;/Route\u0026gt;\r\u0026lt;Route path=\u0026#34;/post/:id\u0026#34;\u0026gt;\r\u0026lt;Post /\u0026gt;\r\u0026lt;/Route\u0026gt;\r\u0026lt;Route exact path=\u0026#34;/myposts\u0026#34;\u0026gt;\r\u0026lt;Posts posts={myPosts} /\u0026gt;\r\u0026lt;/Route\u0026gt;\r\u0026lt;/Switch\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;button onClick={signOut}\u0026gt;Sign out\u0026lt;/button\u0026gt;\r\u0026lt;/HashRouter\u0026gt;\r{showOverlay \u0026amp;\u0026amp; (\r\u0026lt;CreatePost\rupdateOverlayVisibility={updateOverlayVisibility}\rupdatePosts={setPostState}\rposts={posts}\ruser={user}\r/\u0026gt;\r)}\r\u0026lt;/\u0026gt;\r);\r}\rconst dividerStyle = css`\rmargin-top: 15px;\r`;\rconst contentStyle = css`\rmin-height: calc(100vh - 45px);\rpadding: 0px 40px;\r`;\rexport default withAuthenticator(Router); "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.3-tryitout/",
	"title": "Try it out",
	"tags": [],
	"description": "",
	"content": "Deleting the existing data Now the app is ready to test out, but before we do let\u0026rsquo;s delete the existing data in the database. To do so, follow these steps:\nOpen the Amplify console amplify console Click on API, then click on PostTable under the Data sources tab.\nClick on the Explore table items tab. Select the items in the database and delete them by choosing Delete from the Actions button.\n"
},
{
	"uri": "//localhost:1313/3-api/",
	"title": "Using GraphQL with React",
	"tags": [],
	"description": "",
	"content": "In this step, we will create APIs and deploy them by Amplify. We choose GraphQL API\nNội dung Tạo GraphQL API Deploy API Using API "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.4-authgraphql/",
	"title": "Adding Authorization to the GraphQL API",
	"tags": [],
	"description": "",
	"content": "You can update the AppSync API to enable multiple authorization modes.\nIn this example, we will update the API to use the both Cognito and API Key to enable a combination of public and private access. This will also enable us to implement authorization for the API. To enable multiple authorization modes, reconfigure the API:\namplify update api Now, update the GraphQL schema to the following:\ntype Post\r@model\r@auth(\rrules: [\r{ allow: owner }\r{ allow: public, operations: [read] }\r{ allow: private, operations: [read] }\r]\r) {\rid: ID!\rname: String!\rlocation: String!\rdescription: String!\rimage: String\rowner: String\r} Deploy the changes:\namplify push -y Now, you will have two types of API access:\nPrivate (Cognito) - to create a post, a user must be signed in. Once they have created a post, they can update and delete their own post. They can also read all posts. Public (API key) - Any user, regardless if they are signed in, can query for posts or a single post. Using this combination, you can easily query for just a single user\u0026rsquo;s posts or for all posts.\nTo make this secondary private API call from the client, the authorization type needs to be specified in the query or mutation:\nawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\rauthMode: \u0026#34;userPool\u0026#34;,\r}); Adding a new route to view only your own posts Next we will update the app to create a new route for viewing only the posts that we\u0026rsquo;ve created.\nTo do so, first open CreatePost.js and update the save mutation with the following to specify the authmode and set the owner of the post in the local state:\nasync function save() {\rtry {\rconst { name, description, location, image } = formState;\rif (!name || !description || !location || !image.name) return;\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: true }));\rconst postId = uuid();\rconst postInfo = {\rname,\rdescription,\rlocation,\rimage: formState.image.name,\rid: postId,\r};\rconst result = handleUpload(\rformState.image.name,\rformState.image.fileInfo\r);\r// await uploadData(formState.image.name, formState.image.fileInfo);\rconsole.log(\u0026#34;result\u0026#34;, result);\rawait client.graphql({\rquery: createPost,\rvariables: { input: postInfo },\rauthMode: \u0026#34;userPool\u0026#34;,\r});\rupdatePosts([\r...posts,\r{ ...postInfo, image: formState.file, owner: user.username },\r]); // updated\rupdateFormState((currentState) =\u0026gt; ({ ...currentState, saving: false }));\rupdateOverlayVisibility(false);\r} catch (err) {\rconsole.log(\u0026#34;error: \u0026#34;, err);\r}\r} Next, open App.js.\nCreate a new piece of state to hold your own posts named myPosts:\nconst [myPosts, updateMyPosts] = useState([]); Next, in the setPostState method, update myPosts with posts from the signed in user:\nasync function setPostState(postsArray) {\rconst myPostData = postsArray.filter((p) =\u0026gt; p?.owner === user?.username);\rupdateMyPosts(myPostData);\rupdatePosts(postsArray);\r} Now, add a new route to show your posts:\n\u0026lt;Route exact path=\u0026#34;/myposts\u0026#34;\u0026gt;\r\u0026lt;Posts posts={myPosts} /\u0026gt;\r\u0026lt;/Route\u0026gt; Finally, open Header.js and add a link to the new route:\n\u0026lt;Link to=\u0026#34;/myposts\u0026#34; className={linkStyle}\u0026gt;\rMy Posts\r\u0026lt;/Link\u0026gt; "
},
{
	"uri": "//localhost:1313/4-authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "In this section we\u0026rsquo;ll add authentication to our app, using AWS Cognito and the provided NPM module from @aws-amplify/ui-react\nNội dung Authentication in API Authentication in React "
},
{
	"uri": "//localhost:1313/6-photosharingapp/6.5-hosting/",
	"title": "Hosting",
	"tags": [],
	"description": "",
	"content": "The Amplify Console is a hosting service with continuous integration and deployment.\nThe first thing we need to do is create a new GitHub repo for this project. Once we\u0026rsquo;ve created the repo, we\u0026rsquo;ll copy the URL for the project to the clipboard \u0026amp; initialize git in our local project:\ngit init\rgit remote add origin git@github.com\\:username/project-name.git\rgit add .\rgit commit -m \u0026#39;initial commit\u0026#39;\rgit push origin master Next we\u0026rsquo;ll visit the Amplify Console for the app we\u0026rsquo;ve already deployed:\namplify console In the Hosting Environments section, under Host a web app choose GitHub then click on Connect branch. Authorize Github as the repository service.\nNext, we\u0026rsquo;ll choose the new repository \u0026amp; branch for the project we just created \u0026amp; click Next. In the next screen, we\u0026rsquo;ll create a new role \u0026amp; use this role to allow the Amplify Console to deploy these resources, Choose dev Environments \u0026amp; click Next. Finally, we can click Save and Deploy to deploy our application! Now, we can push updates to Main to update our application. The deployment process may take a few minutes. Deploy success!!! You can see our app in new domain\n"
},
{
	"uri": "//localhost:1313/5-storage/",
	"title": "Image Storage with Amazon S3",
	"tags": [],
	"description": "",
	"content": "To add image storage, we\u0026rsquo;ll use Amazon S3, which can be configured and created via the Amplify CLI:\namplify add storage To deploy the service, run the following command:\namplify push To save items to S3, we use the Storage API. The Storage API works like this.\nSaving an item import { uploadData } from \u0026#34;aws-amplify/storage\u0026#34;;\rconst handleUpload = async (key, data) =\u0026gt; {\rconst operation = uploadData({\rkey,\rdata,\roptions: {\raccessLevel: \u0026#34;guest\u0026#34;,\r},\r});\rconst result = await operation.result;\r}; Retrieving an item import { getUrl } from \u0026#34;aws-amplify/storage\u0026#34;;\rconst handleGetUrl = async (key) =\u0026gt; {\rconst res = await getUrl({\rkey,\roptions: {\rvalidateObjectExistence: true,\r},\r});\rreturn res.url.href;\r}; Now we can start saving images to S3 and we can continue building the Photo Sharing App.\n"
},
{
	"uri": "//localhost:1313/6-photosharingapp/",
	"title": "Photo Sharing App",
	"tags": [],
	"description": "",
	"content": "Now that we have the services we need, let\u0026rsquo;s continue by building out the front end of the app.\nNội dung Build component React Router Try it out Add auth for API Hosting "
},
{
	"uri": "//localhost:1313/7-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Removing Services If at any time, or at the end of this workshop, you would like to delete a service from your project \u0026amp; your account, you can do this by running the amplify remove command:\namplify remove auth amplify push If you are unsure of what services you have enabled at any time, you can run the amplify status command:\namplify status\namplify status will give you the list of resources that are currently enabled in your app.\nDeleting the Amplify project and all services If you\u0026rsquo;d like to delete the entire project and all of the resources associated with it, you can run the delete command:\namplify delete "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]